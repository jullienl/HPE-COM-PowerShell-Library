#------------------- FUNCTIONS FOR HPE GreenLake WORKSPACES -----------------------------------------------------------------------------------------------------------------------------------------------

using module .\Constants.psm1

# Public Functions
Function Get-HPEGLWorkspace {
    <#
    .SYNOPSIS
    Retrieve workspace resource(s) from HPE GreenLake.

    .DESCRIPTION
    This Cmdlet returns a collection of workspace resources available in HPE GreenLake. The "current" column indicates the workspace you are currently connected to.
    
    .PARAMETER Name
    Specifies the name of a workspace to retrieve.

    .PARAMETER ShowCurrent
    Retrieves details of the workspace you are currently connected to.
    
    .PARAMETER ShowActivationKey
    Fetches the activation key of the workspace you are presently connected to.
    The activation key is necessary for connecting iLOs to Compute Ops Management.

    .PARAMETER WhatIf 
    Displays the raw REST API call that would be executed, without actually sending the request. Useful for understanding the native REST API interactions with GLP.

    .EXAMPLE
    Get-HPEGLWorkspace

    Retrieves all workspaces available on the HPE GreenLake platform.

    .EXAMPLE
    Get-HPEGLWorkspace -ShowCurrent

    Retrieves general information about the current HPE GreenLake workspace.

    .EXAMPLE
    Get-HPEGLWorkspace -ShowActivationKey

    Retrieves the activation key for the current HPE GreenLake workspace, required for connecting iLOs to Compute Ops Management.
    #>

    
    [CmdletBinding(DefaultParameterSetName = "Default")]
    Param( 

        [Parameter (ParameterSetName = "Default")]
        [ValidateNotNullOrEmpty()]
        [String]$Name,

        [Parameter (ParameterSetName = "Current")]
        [Alias("Current")]
        [Switch]$ShowCurrent,

        [Parameter (ParameterSetName = "ActivationKey")]
        [Switch]$ShowActivationKey,

        [Switch]$WhatIf
    ) 

    Begin {

        $Caller = (Get-PSCallStack)[1].Command
    
        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose
    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        $ReturnData = [System.Collections.ArrayList]::new()
        $AllCollection = [System.Collections.ArrayList]::new()
        
        $Uri = (Get-WorkspacesListUri) + "?count_per_page=5"
        
        # GET WORKSPACES (if any) [Does not include the currently connected workspace]

        try {

            if ($Global:HPEGreenLakeSession.workspaceId) {     

                [Array]$Collection = Invoke-HPEGLWebRequest -Method GET -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference      
            }
            else {
                # Skip parameter must be used to avoid error when Connect-HPEGLWorkspace has not been executed yet (i.e. when no workspace session exists yet).
                [Array]$Collection = Invoke-HPEGLWebRequest -Method GET -Uri $Uri -SkipSessionCheck -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference
            }

        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_)
        }

        if ($Collection.customers) {
            $Collection = $Collection.customers
        }
        else {
            $Collection = @()
        }

        # Add current property
        $Collection | Add-Member -Type NoteProperty -Name "current" -Value $False -Force

        $AllCollection += $Collection
            
        "[{0}] Content of all workspaces except current one: `n {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($AllCollection | Out-String) | Write-Verbose

        # GET CURRENT WORKSPACE (if any)
        
        if ($Global:HPEGreenLakeSession.workspace) {
        
            $uri = Get-CurrentWorkspaceUri    # /accounts/ui/v1/customer/profile/contact
            # $Uri = Get-UserLoadAccountUri                                                      # gives nothing
            # $Uri = (Get-WorkspacesUri) + "/" + $Global:HPEGreenLakeSession.workspaceId + "/contact"   # gives not enough info
            # $Uri = (Get-WorkspacesUri) + "/" + $Global:HPEGreenLakeSession.workspaceId                # gives not enough info

            try {
                
                [Array]$Collection = Invoke-HPEGLWebRequest -Method GET -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference    
                
                # Add platform_customer_id property
                $Collection | Add-Member -Type NoteProperty -Name "platform_customer_id" -Value $Global:HPEGreenLakeSession.workspaceId -Force
                
                # Add account_type (MSP or SANDALONE) from $Global:HPEGLworkspaces generated by 'Connect-HPEGLWorkspace'
                $_AccountType = $Global:HPEGLworkspaces | Where-Object platform_customer_id -eq $Global:HPEGreenLakeSession.workspaceId | ForEach-Object account_type
                $Collection | Add-Member -Type NoteProperty -Name "account_type" -Value $_AccountType -Force
                $Collection | Add-Member -Type NoteProperty -Name "current" -Value $True -Force
                               
                "[{0}] Content of current workspace: `n {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($Collection | Out-String) | Write-Verbose

                $AllCollection += $Collection
                
            }
            catch {
                $PSCmdlet.ThrowTerminatingError($_)
            }
            
            
            # Add name and version properties
            foreach ($_workspace in $AllCollection) {

                $_workspace | Add-Member -Type NoteProperty -Name "name" -Value $_workspace.company_name -Force

                ### Determine if the workspace is v1 or v2 (NOT WORKING - iam_v2_workspace is always returned empty by the API )
                # $_workspace | Add-Member -Type NoteProperty -Name "version" -Value $_.iam_v2_workspace -Force
            }

            "[{0}] Content of all workspaces: `n {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($AllCollection | Out-String) | Write-Verbose

            $CurrentWorkspace = $AllCollection | Where-Object platform_customer_id -eq $Global:HPEGreenLakeSession.workspaceId
        }

        if ($ShowActivationKey) {

            if ($Global:HPEGreenLakeSession.workspaceId) {
                return $Global:HPEGreenLakeSession.workspaceId
                
            }
            elseif ($Global:HPEGreenLakeSession.workspacesCount -eq 0) {

                "[{0}] Error: No workspace found! Please execute New-HPEGLWorkspace first to create the initial workspace." -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                Write-Warning "Error: No workspace found! Please execute New-HPEGLWorkspace first to create the initial workspace."
                return
            }
            elseif ($Global:HPEGreenLakeSession.workspacesCount -ge 1) {
                
                "[{0}] Error: No workspace connection found! Please execute Connect-HPEGLWorkspace first to establish a connection to a workspace." -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                Write-Warning "Error: No workspace connection found! Please execute Connect-HPEGLWorkspace first to establish a connection to a workspace."
                return
            }
            else {
        
                "[{0}] Error: No session found! Please execute Connect-HPEGL first to establish a session." -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                Write-Warning "Error: No session found! Please execute Connect-HPEGL first to establish a session."
                return
            }


        }
        elseif ($ShowCurrent) {      

            $ReturnData = Invoke-RepackageObjectWithType -RawObject $CurrentWorkspace -ObjectName "Workspace"    
            return $ReturnData  
                    
        }
        else {

            if ($AllCollection.Count -gt 0) {

                "[{0}] Found {1} workspace(s)." -f $MyInvocation.InvocationName.ToString().ToUpper(), $AllCollection.Count | Write-Verbose

                if ($Name) {
    
                    $AllCollection = $AllCollection | Where-Object company_name -eq $Name
                }
       
                $ReturnData = Invoke-RepackageObjectWithType -RawObject $AllCollection -ObjectName "Workspace"    
    
                $ReturnData = $ReturnData | Sort-Object { $_.company_name }
        
                return $ReturnData  
            }
            else {

                "[{0}] No workspaces found in the current environment." -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose
                
                return            
            }
        } 
    }
}

Function New-HPEGLWorkspace {
    <#
    .SYNOPSIS
    Creates a workspace in HPE GreenLake.

    .DESCRIPTION
    This cmdlet creates a new workspace in HPE GreenLake. If this is the first workspace being created, the cmdlet will automatically terminate the current HPE GreenLake session and log out the user. 
    Workspaces are created as IAMv2 by default with enhanced identity and access management features and an option for organizational governance. 
    
    To create an IAMv1 workspace, use the -EnableIAMv1Workspace switch.

    When you log in to HPE GreenLake for the first time with an HPE account, you must create a workspace for your organization.

    .PARAMETER Name
    The name of the workspace. The name must be unique across all workspaces on the HPE GreenLake platform.

    .PARAMETER Type
    Specifies the workspace type to create. There are two types of workspace in HPE GreenLake:
        - Standard enterprise workspace: This is the standard workspace for teams wanting to use GreenLake services.
        - Managed service provider workspace: MSP workspaces are for service providers who manage their customers' services, devices, and subscriptions.

    .PARAMETER Street
    Specifies the postal street address of the workspace (optional).

    .PARAMETER Street2
    Specifies the secondary postal street address (Apt, suite, building, floor, etc.) of the workspace (optional).

    .PARAMETER Country
    Specifies the country of origin for the company.

    .PARAMETER City
    Specifies the city of the workspace (optional).

    .PARAMETER State
    Specifies the state of the workspace (optional).

    .PARAMETER PostalCode
    Specifies the postal code of the workspace (optional).

    .PARAMETER PhoneNumber
    Specifies the contact phone number of the workspace (optional).

    .PARAMETER Email
    Specifies the contact email address of the workspace (optional).

    .PARAMETER EnableIAMv1Workspace
    When enabled, creates the workspace using the legacy Identity and Access Management (IAM v1) experience instead of the default IAM v2.

    .PARAMETER WhatIf
    Shows the raw REST API call that would be made to GLP instead of sending the request. This option is useful for understanding the inner workings of the native REST API calls used by GLP.

    .EXAMPLE
    # This example demonstrates how to create a first workspace in an HPE GreenLake console.

    New-HPEGLWorkspace -Name "My_first_workspace_name" -Type "Managed Service Provider workspace" -Country "United States"
    Connect-HPEGL -Credential $credentials -Workspace "My_first_workspace_name"

    The first command creates a new 'Managed Service Provider' workspace named "My_first_workspace_name" in the United States. 
    If the cmdlet detects that this workspace is the first one created, it terminates the current HPE GreenLake session by logging out the user. 
    The next step is to reconnect using the `Connect-HPEGL` cmdlet with the credentials and the newly created workspace name.

    .EXAMPLE
    New-HPEGLWorkspace `
        -Name Velocity  `
        -Type 'Standard enterprise workspace' `
        -Email 'HenriPoincaré@Velocity.com' `
        -Street "Theory of dynamical systems street" `
        -Street2 "Cosmos building" `
        -City Paris `
        -PostalCode 75000 `
        -Country France `
        -PhoneNumber +33612345678 `
        -EnableIAMv2Workspace 

    Creates a new HPE GreenLake workspace named "Velocity" with the standard enterprise workspace type and the specified contact and address details.
    The workspace is created as an IAMv2 workspace, which provides enhanced identity and access management features and organizational governance.

    .INPUTS
    None. You cannot pipe objects to this Cmdlet.

    .OUTPUTS
    System.Collections.ArrayList
    A custom status object or array of objects containing the following PsCustomObject keys:  
        * Name - Name of the workspace object attempted to be created 
        * Status - Status of the creation attempt (Failed for HTTP error return; Complete if the creation is successful; Warning if no action is needed) 
        * Details - More information about the status         
        * Exception: Information about any exceptions generated during the operation.
    #>
    
    [CmdletBinding()]
    Param( 

        [Parameter (Mandatory)]
        [String]$Name,

        [Parameter (Mandatory)]
        [ArgumentCompleter({
                param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameters)
                $Items = @('Standard enterprise workspace', 'Managed Service Provider workspace')
                $filteredItems = $Items | Where-Object { $_ -like "$wordToComplete*" }
                return $filteredItems | ForEach-Object {
                    [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)
                }
            })]
        [ValidateSet ('Standard enterprise workspace', 'Managed Service Provider workspace')]
        [String]$Type,
       
        [parameter (Mandatory)]
        [String]$Street,
        [String]$Street2,
        [String]$City,
        [String]$State,
        [String]$PostalCode,
        
        [Parameter (Mandatory)]
        [ArgumentCompleter({
            param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameters)
            $countryNames = $Global:HPEGLSchemaMetadata.hpeCountryCodes.Name
            $countryNames | Where-Object { $_ -like "$wordToComplete*" } | Sort-Object
        })]
        [ValidateScript({
            $countryNames = $Global:HPEGLSchemaMetadata.hpeCountryCodes.Name
            if ($countryNames -contains $_) { 
                $true 
            } else { 
                Throw "Country '$_' is not valid. Supported countries are: $($countryNames -join ', ')."
            }
        })]
        [ValidateNotNullOrEmpty()]
        [String]$Country,

        [String]$PhoneNumber,

        [validatescript({ if ($_ -as [Net.Mail.MailAddress]) { $true } else { Throw "The Parameter value is not an email address. Please correct the value and try again." } })]
        [String]$Email,     
        
        [switch]$EnableIAMv1Workspace,  

        [Switch]$WhatIf
    ) 

    Begin {

        $Caller = (Get-PSCallStack)[1].Command

        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose
                
        $Uri = Get-NewWorkspaceUri

        $WorkspaceCreationStatus = [System.Collections.ArrayList]::new()
        
    }
    
    Process {
        
        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose
        
        try {
            
            $WorkspaceFound = Get-HPEGLWorkspace

            $WorkspaceNameFound = $WorkspaceFound | Where-Object company_name -eq $Name

            
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_)
            
        }
            
        # Build object for the output
        $objStatus = [pscustomobject]@{
  
            Name      = $Name
            Status    = $Null
            Details   = $Null
            Exception = $Null
          
        }

        if ($WorkspaceNameFound) {
            
            # Must return a message if Workspace found
            "[{0}] Workspace '{1}' found!" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Name | Write-Verbose

            if ($WhatIf) {
                $ErrorMessage = "Workspace '{0}': Resource already exists in HPE GreenLake! No action needed." -f $Name
                Write-warning $ErrorMessage
                return
            }
            else {
                $objStatus.Status = "Warning"
                $objStatus.Details = "This workspace already exists in HPE GreenLake! No action needed."
            }
            
        }
        else {

            $CountryCode = $Global:HPEGLSchemaMetadata.hpeCountryCodes | Where-Object name -eq $Country | ForEach-Object code           

            if ($Type -eq "Managed Service Provider workspace") {
                $WorkspaceType = "MSP"
            }
            elseif ($Type -eq "Standard enterprise workspace") {
                $WorkspaceType = "STANDALONE"
                
            }

            # Create payload  

            $Payload = [PSCustomObject]@{
                workspace_type   = $WorkspaceType
                company_name     = $Name
                created_by       = $Global:HPEGreenLakeSession.username
                email            = $Email
                phone_number     = $PhoneNumber
                iam_v2_workspace = if ($EnableIAMv1Workspace.IsPresent) { $false } else { $true }  # IAMv2 by default
                address          = @{
                    street_address   = $Street
                    street_address_2 = $Street2
                    city             = $City
                    state_or_region  = $State
                    zip              = $PostalCode
                    country_code     = $CountryCode
                }
            } | ConvertTo-Json -Depth 5


            # Create workspace

            try {
                            
                if ($Global:HPEGreenLakeSession.workspaceId) {
                    $Response = Invoke-HPEGLWebRequest -Uri $Uri -method 'POST' -body $Payload -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference    
                    
                } 
                # If this is the first workspace beeing created, the workspace session check must be skipped with Invoke-HPEGLWebRequest
                else {
                    $Response = Invoke-HPEGLWebRequest -Uri $Uri -method 'POST' -body $Payload -SkipSessionCheck -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference    
                }

                if (-not $WhatIf) {

                    "[{0}] Workspace '{1}' successfully created!" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Name | Write-Verbose

                    # When the first workspace is created, it is necessary to run 'Connect-HPEGL -workspace <workspace_name>' to access the first new workspace.
                    if (-not $Global:HPEGreenLakeSession.workspaceId) {
                        $objStatus.Status = "Complete"
                        $objStatus.Details = "Workspace successfully created! Session disconnected, you must run `Connect-HPEGL -workspace <workspace_name>` to access the new workspace."
                        
                    }
                    else {
                        $objStatus.Status = "Complete"
                        $objStatus.Details = "Workspace successfully created!"
                    }

                }


            }
            catch {

                if (-not $WhatIf) {
                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Workspace cannot be created!"
                    $objStatus.Exception = $Global:HPECOMInvokeReturnData 

                }
            }
        }

        [void] $WorkspaceCreationStatus.add($objStatus)

    }

    End {

        if (-not $WhatIf) {

            # Must disconnect if this is the first workspace beeing created
            if (-not $WorkspaceFound) {
                Disconnect-HPEGL
            }
            else {
                $Global:HPEGreenLakeSession.workspacesCount++
            }

            $WorkspaceCreationStatus = Invoke-RepackageObjectWithType -RawObject $WorkspaceCreationStatus -ObjectName "ObjStatus.NSDE" 
            Return $WorkspaceCreationStatus
        }
    }
}

Function Set-HPEGLWorkspace {
    <#
    .SYNOPSIS
    Updates the current workspace details.

    .DESCRIPTION
    Updates general information about the HPE GreenLake workspace to which you are currently connected. If you omit any parameter, the cmdlet retains the current settings for those fields and only updates the provided parameters.

    .PARAMETER NewName 
    Specifies the new name of the workspace. The new name must be unique across all workspaces on the HPE GreenLake platform.

    .PARAMETER Street
    Specifies the postal street address of the workspace.

    .PARAMETER Street2
    Specifies the secondary postal street address (Apt, suite, building, floor, etc.) of the workspace.

    .PARAMETER Country
    Specifies the country of origin for the company.

    .PARAMETER City
    Specifies the city of the workspace.

    .PARAMETER State
    Specifies the state of the workspace.

    .PARAMETER PostalCode
    Specifies the postal code of the workspace.

    .PARAMETER PhoneNumber
    Specifies the contact phone number of the workspace.

    .PARAMETER Email
    Specifies the contact email address of the workspace. 

    .PARAMETER WhatIf 
    Shows the raw REST API call that would be made to GLP instead of sending the request. This option is useful for understanding the inner workings of the native REST API calls used by GLP.

    .EXAMPLE
    Set-HPEGLWorkspace `
        -Street "Theory of Dynamical Systems Street" `
        -City Heaven `
        -PostalCode 77777 `
        -Country France `
        -PhoneNumber +33612345678

    Sets the street address, city, postal code, country, and phone number information of the currently connected HPE GreenLake workspace.

    .EXAMPLE
    Set-HPEGLWorkspace -State "" -Street2 ""

    Removes the state and the secondary address line details from the currently connected HPE GreenLake workspace while preserving all other existing settings.

    .INPUTS
    No pipeline input is supported.

    .OUTPUTS
    System.Collections.ArrayList
    A custom status object or array of objects containing the following PsCustomObject keys:  
        * Name - Name of the workspace object attempted to be updated.
        * Status - Status of the modification attempt (Failed for HTTP error return; Complete if the workspace update is successful).
        * Details - More information about the status.
        * Exception - Information about any exceptions generated during the operation.
    #>


    [CmdletBinding()]
    Param( 
        [ValidateNotNullOrEmpty()]
        [String]$NewName,

        [String]$Street,
        [String]$Street2,
        [String]$City,
        [String]$State,
        [String]$PostalCode,

        [ArgumentCompleter({
            param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameters)
            $countryNames = $Global:HPEGLSchemaMetadata.hpeCountryCodes.Name
            $countryNames | Where-Object { $_ -like "$wordToComplete*" } | Sort-Object
        })]
        [ValidateScript({
            $countryNames = $Global:HPEGLSchemaMetadata.hpeCountryCodes.Name
            if ($countryNames -contains $_) { 
                $true 
            } else { 
                Throw "Country '$_' is not valid. Supported countries are: $($countryNames -join ', ')."
            }
        })]
        [ValidateNotNullOrEmpty()]
        [String]$Country,

        [String]$PhoneNumber,

        [validatescript({ if ($_ -as [Net.Mail.MailAddress]) { $true } else { Throw "The Parameter value is not an email address. Please correct the value and try again." } })]
        [String]$Email,    

        [Switch]$WhatIf
       
    ) 

    Begin {

        $Caller = (Get-PSCallStack)[1].Command

        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose

        $SetWorkspaceStatus = [System.Collections.ArrayList]::new()
        
    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        # Check current workspace

        try {
            $WorkspaceDetails = Get-HPEGLWorkspace -ShowCurrent
           
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_)
            
        }

        $Uri = Get-CurrentWorkspaceUri

        # Build object for the output
        $objStatus = [pscustomobject]@{
  
            Name      = $WorkspaceDetails.company_name
            Status    = $Null
            Details   = $Null
            Exception = $Null
                  
        }

        # Conditionally add properties
        if ($NewName) {
            $Name = $NewName
        }
        else {
            $Name = $WorkspaceDetails.company_name
        }
       
        if (-not $PSBoundParameters.ContainsKey('Street')) {
	    
            if ($WorkspaceDetails.address.street_address) {
                          
                $Street = $WorkspaceDetails.address.street_address
            }
            else {
                $Street = $Null
            }
        }

        if (-not $PSBoundParameters.ContainsKey('Street2')) {
	    
            if ($WorkspaceDetails.address.street_address_2) {
                          
                $Street2 = $WorkspaceDetails.address.street_address_2

            }
            else {
                $Street2 = $Null
            }
        }

        if (-not $PSBoundParameters.ContainsKey('State')) {
	    
            if ($WorkspaceDetails.address.state_or_region) {
                          
                $State = $WorkspaceDetails.address.state_or_region

            }
            else {
                $State = $Null
            }
        }

        if (-not $PSBoundParameters.ContainsKey('PostalCode')) {
	    
            if ($WorkspaceDetails.address.zip) {
                          
                $PostalCode = $WorkspaceDetails.address.zip

            }
            else {
                $PostalCode = $Null
            }
        }

        if (-not $PSBoundParameters.ContainsKey('City')) {
	    
            if ($WorkspaceDetails.address.city) {
                          
                $City = $WorkspaceDetails.address.city

            }
            else {
                $City = $Null
            }
        }
 
        if (-not $PSBoundParameters.ContainsKey('Country')) {
	    
            if ($WorkspaceDetails.address.country_code) {
                          
                $CountryCode = $WorkspaceDetails.address.country_code

            }

        }
        else {
            $CountryCode = $Global:HPEGLSchemaMetadata.hpeCountryCodes | Where-Object name -eq $Country | ForEach-Object code
        }
        
        if (-not $PSBoundParameters.ContainsKey('PhoneNumber')) {
	    
            if ($WorkspaceDetails.phone_number) {
                          
                $PhoneNumber = $WorkspaceDetails.phone_number

            }
            else {
                $PhoneNumber = $Null
            }

        }

        if (-not $PSBoundParameters.ContainsKey('Email')) {
	    
            if ($WorkspaceDetails.email) {
                          
                $Email = $WorkspaceDetails.email

            }
            else {
                $Email = $Null
            }

        }

        $Payload = [PSCustomObject]@{
            company_name = $Name
            email        = $Email
            phone_number = $PhoneNumber
            address      = @{
                street_address   = $Street
                street_address_2 = $Street2
                city             = $City
                state_or_region  = $State
                zip              = $PostalCode
                country_code     = $CountryCode
            }
        } | ConvertTo-Json -Depth 5


        # Current workspace modification
        try {
        
            $Response = Invoke-HPEGLWebRequest -Method 'PUT' -Body $Payload -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference
                         
            if (-not $WhatIf) {
                $objStatus.Status = "Complete"
                $objStatus.Details = ($Response | ForEach-Object message)
            }

        }
        catch {

            if (-not $WhatIf) {
                $objStatus.Status = "Failed"
                $objStatus.Details = ($Response | ForEach-Object message)
                $objStatus.Exception = $Global:HPECOMInvokeReturnData 
            }
        }    

        [void] $SetWorkspaceStatus.add($objStatus)
        

    }

    end {

        if (-not $WhatIf) {

            $SetWorkspaceStatus = Invoke-RepackageObjectWithType -RawObject $SetWorkspaceStatus -ObjectName "ObjStatus.NSDE" 
            Return $SetWorkspaceStatus
        }


    }
}

Function Remove-HPEGLWorkspace {
    <#
    .SYNOPSIS
    Deletes the currently connected workspace from HPE GreenLake.

    .DESCRIPTION
    This cmdlet deletes the currently connected workspace from HPE GreenLake. You cannot delete a workspace if you are not connected to it. Deletion is permanent and cannot be undone.

    The cmdlet issues a message at runtime to warn the user of the irreversible impact of this action and asks for a confirmation for the removal of the workspace.

    If the user confirms the action, the workspace is deleted. If the user cancels the action, the workspace is not deleted.

    Only IAM v2 workspaces are supported for deletion. If you attempt to delete an IAM v1 workspace, the operation will fail.
    
    After the workspace is deleted, the user is disconnected from HPE GreenLake and must run 'Connect-HPEGL -workspace <workspace_name>' to access another workspace.
    
    .PARAMETER Force
    Suppresses the confirmation prompt and forces the deletion of the specified workspace. Use this parameter with caution, as this action is irreversible.

    .PARAMETER NotifyAllWorkspaceUsersByEmail
    If specified, sends an email notification to all users associated with the workspace about its deletion.

    .PARAMETER WhatIf
    Shows the raw REST API call that would be made to GLP instead of sending the request.

    .EXAMPLE
    Delete-HPEGLWorkspace

    Deletes the currently connected workspace.

    .EXAMPLE
    Delete-HPEGLWorkspace -Force -NotifyAllWorkspaceUsersByEmail
    
    Deletes the currently connected workspace without prompting for confirmation and sends an email notification to all users associated with the workspace about its deletion.

    .INPUTS
    No pipeline input is supported.

    #>

    [CmdletBinding()]
    Param(

        [Switch]$Force,

        [Switch]$NotifyAllWorkspaceUsersByEmail,

        [Switch]$WhatIf
    )

    Begin {
        $Caller = (Get-PSCallStack)[1].Command
        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose
        $DeleteStatus = [System.Collections.ArrayList]::new()
    }

    Process {
        
        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        $WorkspaceId = $Global:HPEGreenLakeSession.workspaceId

        $objStatus = [pscustomobject]@{
            Name      = $Global:HPEGreenLakeSession.workspace
            Status    = $null
            Details   = $null
            Exception = $null
        }

        if (-not $WorkspaceId) {

            if ($WhatIf) {
                $ErrorMessage = "No workspace connection found! Make sure you are connected to a workspace before attempting to delete it." 
                Write-warning $ErrorMessage
                return
            }
            else {                
                $objStatus.Status = "Failed"
                $objStatus.Details = "No workspace connection found! Make sure you are connected to a workspace before attempting to delete it."
                [void]$DeleteStatus.Add($objStatus)
                return
            }
        }

        $uriBase = (Get-WorkspacesV2Uri) + "/$($WorkspaceId)"
        if ($NotifyAllWorkspaceUsersByEmail) {
            $Uri = "$($uriBase)?send-email=true"
        }
        else {
            $Uri = $uriBase
        }

        $shouldDelete = $Force
        if (-not $Force) {
            $title = "This action will permanently and irrecoverably delete all data associated with this workspace. Confirm that you would like to remove '{0}' from HPE GreenLake." -f $Global:HPEGreenLakeSession.workspace
            $question = 'This action is irreversible and cannot be canceled or undone once the process has begun. Are you sure you want to proceed?'
            $choices = '&Yes', '&No'
            $decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)
            $shouldDelete = ($decision -eq 0)
        }

        if ($shouldDelete) {
            try {
                $Response = Invoke-HPEGLWebRequest -Method DELETE -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference
                if (-not $WhatIf) {
                    "[{0}] Workspace '{1}' was successfully deleted." -f $MyInvocation.InvocationName.ToString().ToUpper(), $Global:HPEGreenLakeSession.workspace | Write-Verbose
                    $objStatus.Status = "Complete"
                    $objStatus.Details = "Workspace deleted successfully. You have been disconnected. To access another workspace, please run 'Connect-HPEGL -workspace <workspace_name>'."
                }
            }
            catch {
                if (-not $WhatIf) {
                    $objStatus.Status = "Failed"
                    if ($_.Exception.Message -match "500") {
                        $objStatus.Details = "Workspace cannot be deleted. Only IAM v2 workspaces are supported for deletion."
                    }
                    else {
                        $objStatus.Details = "Workspace could not be deleted."
                    }
                    $objStatus.Exception = $Global:HPECOMInvokeReturnData
                }
            }
        }
        else {
            "[{0}] User cancelled the deletion of the workspace '{1}'" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Global:HPEGreenLakeSession.workspace | Write-Verbose
            if ($WhatIf) {
                Write-warning "Operation cancelled by the user!"
                return
            }
            else {
                $objStatus.Status = "Warning"
                $objStatus.Details = "Operation cancelled by the user! Workspace not deleted!"
            }
        }

        [void]$DeleteStatus.Add($objStatus)
    }

    End {
        if (-not $WhatIf) {
            $DeleteStatus = Invoke-RepackageObjectWithType -RawObject $DeleteStatus -ObjectName "ObjStatus.NSDE"
            Remove-Variable -Name HPEGreenLakeSession -Scope Global -Force
            return $DeleteStatus
        }
    }
}


Function Convert-HPEGLWorkspaceToV2 {
    <#
    .SYNOPSIS
    Convert an IAM v1 workspace to v2.

    .DESCRIPTION
    Converts a IAM v1 workspace to  IAM v2. Upgrading to a v2 workspace is essential to leverage the latest features and functionalities of the HPE GreenLake platform, including support for enhanced identity and access management features and an option for organizational governance. 
    
    The conversion process is irreversible. Once a workspace is converted to v2, it cannot be reverted back to v1. Ensure that you have reviewed the implications of this change before proceeding with the conversion.    
    
    .PARAMETER Name
    Specifies the name of the workspace to convert to IAM v2.

    .PARAMETER WhatIf 
    Shows the raw REST API call that would be made to GLP instead of sending the request. This option is useful for understanding the inner workings of the native REST API calls used by GLP.

    .EXAMPLE
    Set-HPEGLWorkspaceV1toV2 -name HPE_Worksapce_03489293

    Migrates the workspace named 'HPE_Workspace_03489293' to IAM v2.

    .INPUTS
    No pipeline input is supported.

    .OUTPUTS
    System.Collections.ArrayList
    A custom status object or array of objects containing the following PsCustomObject keys:  
        * Name - Name of the workspace object attempted to be migrated.
        * Status - Status of the modification attempt (Failed for HTTP error return; Complete if the workspace migration is successful).
        * Details - More information about the status.
        * Exception - Information about any exceptions generated during the operation.
    #>
    [CmdletBinding()]
    Param( 
        [ValidateNotNullOrEmpty()]
        [String]$Name,

        [Switch]$WhatIf
       
    ) 

    Begin {

        $Caller = (Get-PSCallStack)[1].Command
        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose
        $ObjectStatusList = [System.Collections.ArrayList]::new()
        
    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose
        
        # Build object for the output
        $objStatus = [pscustomobject]@{
  
            Name      = $Name
            Status    = $Null
            Details   = $Null
            Exception = $Null
                  
        }   

        # If (-not $Global:HPEGreenLakeSession.glpApiAccessTokenv1_2.access_token) {
            
        #     $ErrorMessage = "Operation failure! The migration process requires a v1.2 JSON web token. Ensure you are connected to a V2 workspace before executing this command."
        #     Write-warning $ErrorMessage
        #     exit

        # }

        [void] $ObjectStatusList.add($objStatus)
     
    }

    end {

        # Check if workspace exists
        try {
            $Workspaces = Get-HPEGLWorkspace             
            
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_)
            
        }
        
        foreach ($Object in $ObjectStatusList) {
        
            $Workspacefound = $Workspaces | Where-Object name -eq $Object.Name

            $WorkspaceId = $Workspacefound.platform_customer_id
        
            if (-not $Workspacefound) {                
                # Must return a message if workspace not found
                $Object.Status = "Failed"
                $Object.Details = "Workspace cannot be found!"
                
                if ($WhatIf) {
                    $ErrorMessage = "Workspace '{0}': Resource cannot be found!" -f $Object.Name
                    Write-warning $ErrorMessage
                    continue
                }                
            }
            else {

                # if ($Workspacefound.PSObject.Properties.Match("iam_v2_workspace")) {
                #     $IsItaV2workspace = $Workspacefound.iam_v2_workspace
                # }
                # else {
                #     $IsItaV2workspace = $True
                # }

                # if ($IsItaV2workspace -eq $True) {
                
                #     # Must return a message if workspace not found
                #     $Object.Status = "Failed"
                #     $Object.Details = "Workspace is already a V2 workspace!"
                    
                #     if ($WhatIf) {
                #         $ErrorMessage = "Workspace '{0}': Resource is already a V2 workspace!" -f $Object.Name
                #         Write-warning $ErrorMessage
                #         continue
                #     }
                    
                # }
                # else {                
                    
                $Uri = (Get-WorkspaceMigrationUri) + $WorkspaceId + "/migrate-workspace"
                    
                # Migrate workspace
                    
                try {
                        
                    $Response = Invoke-HPEGLWebRequest -Method 'POST' -Uri $Uri -whatifBoolean $WhatIf -Verbose:$VerbosePreference
                        
                    # Polling until the migration is complete
                    if (-not $WhatIf) {
                        do {                                
                            Start-Sleep -Seconds 5
                            $MigrationStatus = Invoke-HPEGLWebRequest -Method 'GET' -Uri $Uri -Verbose:$VerbosePreference
                            "[{0}] Migration status for workspace '{1}': {2}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Object.Name, ($MigrationStatus | ForEach-Object status) | Write-Verbose
                        } until (("SUCCEEDED", "FAILED", "CANCELLED" -contains ($MigrationStatus | ForEach-Object state)))

                        if ($MigrationStatus.state -in "FAILED", "CANCELLED") {
                            "[{0}] Workspace '{1}' migrated to IAM v2 failed." -f $MyInvocation.InvocationName.ToString().ToUpper(), $Object.Name | Write-Verbose
                            $objStatus.Status = "Failed"
                            $objStatus.Details = "Workspace migration to IAM v2 failed. Message: $($MigrationStatus.error.message)"
                        }
                        else {
                            "[{0}] Migration completed for workspace '{1}': {2}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Object.Name, ($MigrationStatus | ForEach-Object state) | Write-Verbose
                            $objStatus.Status = "Complete"
                            $objStatus.Details = "Workspace successfully migrated to IAM v2."
                        }
                    }
                }
                catch {                        
                    if (-not $WhatIf) {
                        $objStatus.Status = "Failed"
                        $objStatus.Details = "Workspace cannot be migrated to IAM v2."
                        $objStatus.Exception = $Global:HPECOMInvokeReturnData 
                    }
                }
            }    
        }       

        if (-not $WhatIf) {    
            $ObjectStatusList = Invoke-RepackageObjectWithType -RawObject $ObjectStatusList -ObjectName "ObjStatus.NSDE" 
            Return $ObjectStatusList
        }
    }
}

Function Get-HPEGLWorkspaceSAMLSSODomain {
    <#
    .SYNOPSIS
    Retrieves details of the SAML SSO domain.

    .DESCRIPTION
    This function retrieves information about the SAML SSO domain configured in the workspace. It can return SAML attributes, download the metadata file for a specified domain, and extract the X509 certificate from the metadata file if requested.

    .PARAMETER DomainName
    Specifies the name of the SAML SSO domain.

    .PARAMETER ShowSAMLAttributes
    If specified, returns the SAML attributes for the specified domain.

    .PARAMETER ShowSPCertificate
    If specified, returns the Service Provider (SP, i.e., HPE GreenLake) X509 certificate.

    .PARAMETER ShowIDPCertificate
    If specified, returns the Identity Provider (IdP) X509 certificate.

    .PARAMETER DownloadServiceProviderMetadata
    If specified, downloads the SAML SSO metadata file of the Service Provider (SP, i.e., HPE GreenLake) to the specified file path. This metadata is used by Identity Providers (IdPs) like ADFS to establish trust and facilitate Single Sign-On (SSO) interactions.

    .PARAMETER WhatIf
    Displays the raw REST API call that would be executed, without actually sending the request. Useful for understanding the native REST API interactions with GLP.

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain

    Retrieves all SAML SSO domains configured in the workspace.

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com"

    Returns the SAML SSO domain "example.com" details.

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -ShowSAMLAttributes

    Retrieves the SAML attributes for the SAML SSO domain "example.com".

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -ShowSPCertificate

    Returns the Service Provider (SP, i.e., HPE GreenLake) X509 certificate for the SAML SSO domain "example.com".

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -ShowIDPCertificate

    Returns the Identity Provider (IdP) X509 certificate for the SAML SSO domain "example.com".

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -DownloadServiceProviderMetadata "C:\path\to\metadata.xml"

    Downloads the metadata file for the SAML SSO domain "example.com" to the specified file path.

    #>

    [CmdletBinding(DefaultParameterSetName = "Default")]
    Param(
        [Parameter(ParameterSetName = "Default")]
        [Parameter(Mandatory, ParameterSetName = "DomainNameSAMLAttributes")]
        [Parameter(Mandatory, ParameterSetName = "DomainNameSP")]
        [Parameter(Mandatory, ParameterSetName = "DomainNameIDP")]
        [Parameter(Mandatory, ParameterSetName = "DomainNameMetadataDownload")]
        [String]$DomainName,

        [Parameter(ParameterSetName = "DomainNameSAMLAttributes")]
        [switch]$ShowSAMLAttributes,
        
        [Parameter(ParameterSetName = "DomainNameSP")]
        [switch]$ShowSPCertificate,

        [Parameter(ParameterSetName = "DomainNameIDP")]
        [switch]$ShowIDPCertificate,

        [Parameter(ParameterSetName = "DomainNameMetadataDownload")]
        [String]$DownloadServiceProviderMetadata,

        [Switch]$WhatIf
    )

    Begin {
        $Caller = (Get-PSCallStack)[1].Command
        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose
    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        $ReturnData = [System.Collections.ArrayList]::new()
        
        $Uri = Get-AuthnSAMLSSOUri
        

        try {
          
            [Array]$Collection = Invoke-HPEGLWebRequest -Method GET -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference

        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_)
        }


        if ($Collection.domains.count -gt 0) {

            $Collection = $Collection.domains
        }     
        else {
            $Collection = $Null
        }
        

        if ($Null -ne $Collection ) {

            if ($DomainName) {
                
                $DomainFound = $Collection | Where-Object domain -eq $DomainName

                if (($DomainFound -or ($DomainFound -and $ShowIDPCertificate)) -and -not $ShowSAMLAttributes -and -not $ShowSPCertificate -and -not $DownloadServiceProviderMetadata) {

                    $Uri = (Get-AuthnSAMLSSOUri) + "/" + $DomainName

                    [Array]$Collection = Invoke-HPEGLWebRequest -Method GET -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference

                    if ($ShowIDPCertificate) {

                        $ReturnData = $Collection.saml_idp_config.signing_certificate

                    }
                    else {
                        
                        $ReturnData = Invoke-RepackageObjectWithType -RawObject $Collection -ObjectName "Workspace.SAML.Domain.Details"    
                    }

                    return $ReturnData  

                }
                elseif ($DomainFound -and $ShowSAMLAttributes) {
                    
                    $Uri = (Get-SAMLAttributesUri) + $DomainFound.domain
                    
                    try {
                        $SAMLAttributes = (Invoke-HPEGLWebRequest -Method GET -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference)
                    }
                    catch {
                        $PSCmdlet.ThrowTerminatingError($_)
                    }

                    if ($SAMLAttributes) {

                        # Add the GLP application to the applications property as it does not exist
                        $GLP_object = [PSCustomObject]@{
                            application_id   = "00000000-0000-0000-0000-000000000000"
                            application_name = "HPE GreenLake platform"
                        }

                        $SAMLAttributes.applications += $GLP_object

                        # Add the missing properties to each applications item
                        foreach ($currentItemName in $SAMLAttributes.applications) {
                            $currentItemName | Add-Member -Type NoteProperty -Name "entity_id" -Value $SAMLAttributes.entity_id	
                            $currentItemName | Add-Member -Type NoteProperty -Name "sign_on_url" -Value $SAMLAttributes.sign_on_url		
                            $currentItemName | Add-Member -Type NoteProperty -Name "platform_customer_id" -Value $SAMLAttributes.platform_customer_id			
                        }

                        $ReturnData = Invoke-RepackageObjectWithType -RawObject $SAMLAttributes.applications -ObjectName "Workspace.SAML.Attributes"    

                        return $ReturnData

                    }
                    else {

                        return

                    }

                }
                elseif ($DomainFound -and ($DownloadServiceProviderMetadata -or $ShowSPCertificate)) {

                    $Uri = (Get-AuthnSAMLSSOMetadataUri) + $DomainFound.domain

                    try {
                        [string]$MetadataURL = (Invoke-HPEGLWebRequest -Method GET -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference).metadata_url
                    }
                    catch {
                        $PSCmdlet.ThrowTerminatingError($_)
                    }
        
                    if ($MetadataURL) {
    
                        [xml]$MetadataFile = Invoke-WebRequest -Method GET -Uri $MetadataURL
        
                        if ($ShowSPCertificate) {
                            return $MetadataFile.EntityDescriptor.SPSSODescriptor.KeyDescriptor.KeyInfo.X509Data.X509Certificate
                        }
                        elseif ($DownloadServiceProviderMetadata) {
                            $MetadataFile.Save($DownloadServiceProviderMetadata)
                            Write-Output "Metadata file '$DownloadServiceProviderMetadata' successfully downloaded." 
                        }
                        else {
                            return $MetadataFile
                        }
                    }
                    else {
                        return
                    }
    
                }
                elseif (($DownloadServiceProviderMetadata -or $ShowSPCertificate -or $ShowSAMLAttributes -or $ShowIDPCertificate) -and -not $DomainFound) {

                    "[{0}] SAML SSO Domain '{1}' cannot be found!" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName | Write-Verbose
        
                    $ErrorMessage = "SAML SSO Domain '{0}': Resource cannot be found in the workspace!" -f $DomainName
                    Write-Warning $ErrorMessage
                    return
                }
                else {

                    return

                }
                
            }            
            else {
                
                $ReturnData = Invoke-RepackageObjectWithType -RawObject $Collection -ObjectName "Workspace.SAML.Domain"    
                
                $ReturnData = $ReturnData | Sort-Object { $_.domain }
                
                return $ReturnData  

            }
        }    
        else {
            Return
        } 
    }
}

Function New-HPEGLWorkspaceSAMLSSODomain {
    <#
    .SYNOPSIS
    Adds a SAML SSO domain to the workspace.

    .DESCRIPTION
    Configures a SAML SSO domain in the workspace to enable Single Sign-On (SSO). The SSO connection can be used for authentication only or can also provide role information via the SAML response.
    
    The SAML SSO domain must be a private domain that you own, such as example.com, mycompany.com, or mydomain.com. Public domains like facebook.com, gmail.com, outlook.com, or yahoo.com cannot be used to configure SSO. 
    
    The domain must have at least one verified user belonging to it defined in the workspace.
    
    .PARAMETER DomainName
    Specifies the name of the SAML SSO domain to create. There must be at least one verified user belonging to the domain.

    .PARAMETER AuthorizationMethod
    Specifies the authorization method for the SAML SSO domain. Supported values are "SAML" or "Locally-managed".
    - SAML: Use the SSO SAML response for session-based authorization.
    - Locally-managed: Manage authorization locally via the GreenLake Platform.

    .PARAMETER MetadataSource
    Specifies the source of the metadata file for the SAML SSO domain. The metadata file can be provided as a file path or a URL. The metadata file must be in XML format.

    .PARAMETER EmailAttribute
    Optional attribute to set the email mapping attribute. The default value is "NameId", which is commonly used by identity providers.

    .PARAMETER FirstNameAttribute
    Optional attribute to set the first name mapping attribute. The default value is "FirstName", which is commonly used by identity providers. Set this attribute if your identity provider uses a different attribute. If your identity provider does not have SAML attributes for these values, you can ignore this parameter.

    .PARAMETER LastNameAttribute
    Optional attribute to set the last name mapping attribute. The default value is "LastName", which is commonly used by identity providers. Set this attribute if your identity provider uses a different attribute. If your identity provider does not have SAML attributes for these values, you can ignore this parameter.

    .PARAMETER GreenLakeAttribute
    SAML attribute name for the HPE GreenLake attribute. This is required when SAML is being used for authorization. The default value is "hpe_ccs_attribute".

    .PARAMETER IdleSessionTimeout
    Specifies the amount of time in minutes a user can be inactive before a session ends. Idle time cannot exceed 1,440 minutes (24 hours).

    .PARAMETER RecoveryUserPassword
    Specifies the recovery user password. The password must be at least 8 characters long and include upper-case, lower-case, number, and symbol.

    .PARAMETER PointOfContactEmail
    Specifies the point of contact email that will be used to regain access to your account if you forget your password.

    .PARAMETER DisableRecoveryUser
    Disables the recovery user for the SAML SSO domain.

    .PARAMETER WhatIf
    Shows the raw REST API call that would be made to GLP instead of sending the request. This option is useful for understanding the inner workings of the native REST API calls used by GLP.

    .EXAMPLE
    $PlainTextPassword = "YourPlainTextPassword!10"
    $SecurePassword = ConvertTo-SecureString -String $PlainTextPassword -AsPlainText -Force
    New-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -AuthorizationMethod SAML -MetadataSource "C:\Documents\federationmetadata.xml" -RecoveryUserSecurePassword $SecurePassword -PointOfContactEmail leonhard.euler@mathematician.com
    
    Adds a new SAML SSO domain named "example.com" with a specified metadata file provided as a file path, a recovery user password, and a point of contact email. The SAML SSO domain is configured for SAML-based authorization, i.e., the SSO SAML response defines the session-based authorization.

    .EXAMPLE
    New-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -AuthorizationMethod Locally-managed -MetadataSource "https://example.com/federationmetadata/2007-06/federationmetadata.xml" -RecoveryUserSecurePassword $SecurePassword -PointOfContactEmail leonhard.euler@mathematician.com
    
    Adds a new SAML SSO domain named "example.com" with the specified metadata file provided as a URL, a recovery user password, and a point of contact email. The SAML SSO domain is configured for locally-managed authorization, i.e., authorization is managed locally via the GreenLake Platform.

    .EXAMPLE
    New-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -AuthorizationMethod Locally-managed -MetadataSource "https://example.com/federationmetadata/2007-06/federationmetadata.xml" -DisableRecoveryUser
    
    Adds a new SAML SSO domain named "example.com" with the specified metadata file provided as a URL and disables the recovery user for the SAML SSO domain. The SAML SSO domain is configured for locally-managed authorization, i.e., authorization is managed locally via the GreenLake Platform.

    .INPUTS
    Pipeline input is not supported.

    .OUTPUTS
    System.Collections.ArrayList
        A custom status object or array of objects containing the following keys:
        * Name - The name of the SAML SSO domain to add.
        * RecoveryUserEmail - The email of the generated recovery user (if not disabled).
        * Status - The status of the creation attempt (Failed for HTTP error return; Complete if deployment is successful; Warning if no action is needed).
        * Details - More information about the status.
        * Exception - Information about any exceptions generated during the operation.
#>

    [CmdletBinding(DefaultParameterSetName = "MetadataFileEnableRecoveryUser")]
    Param( 

        [Parameter (Mandatory, ParameterSetName = "MetadataFileEnableRecoveryUser")]
        [Parameter (Mandatory, ParameterSetName = "MetadataFileDisableRecoveryUser")]
        [String]$DomainName,

        [Parameter (Mandatory)]
        [ValidateSet("SAML", "Locally-managed")]
        [String]$AuthorizationMethod,

        [Parameter (Mandatory, ValueFromPipeline, ParameterSetName = "MetadataFileEnableRecoveryUser")]
        [Parameter (Mandatory, ValueFromPipeline, ParameterSetName = "MetadataFileDisableRecoveryUser")]
        [String]$MetadataSource,

        [String]$EmailAttribute = "NameId", 
        
        [String]$FirstNameAttribute = "FirstName",
        
        [String]$LastNameAttribute = "LastName",
        
        [String]$GreenLakeAttribute = "hpe_ccs_attribute",

        [ValidateScript({
                if ($_ -le 1440) {
                    $true
                }
                else {
                    throw "Idle time cannot exceed 1,440 minutes (24 hours)."
                }
            })]
        [Int]$IdleSessionTimeout = 60,

        [Parameter (Mandatory, ParameterSetName = "MetadataFileEnableRecoveryUser")]
        [SecureString]$RecoveryUserSecurePassword,

        [Parameter (Mandatory, ParameterSetName = "MetadataFileEnableRecoveryUser")]
        [validatescript({ if ($_ -as [Net.Mail.MailAddress]) { $true } else { Throw "The Parameter value is not an email address. Please correct the value and try again." } })]
        [String]$PointOfContactEmail,

        [Parameter (Mandatory, ParameterSetName = "MetadataFileDisableRecoveryUser")]
        [switch]$DisableRecoveryUser,

        [Switch]$WhatIf
    ) 

    Begin {

        $Caller = (Get-PSCallStack)[1].Command

        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose

        $Uri = Get-ApplicationProvisioningUri

        $AddSAMLSSODomainStatus = [System.Collections.ArrayList]::new()

        
        
    }
    
    Process {
        
        
        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose
        
        if ($RecoveryUserSecurePassword) {

            # Convert SecureString to plain text
            $RecoveryUserPassword = [Runtime.InteropServices.Marshal]::PtrToStringBSTR([Runtime.InteropServices.Marshal]::SecureStringToBSTR($RecoveryUserSecurePassword))
            
            if ($RecoveryUserPassword -notmatch '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$') {
                throw "The recovery user password must be at least 8 characters long and include upper-case, lower-case, number, and symbol."
            }
        }
        
        # Build object for the output
        $objStatus = [pscustomobject]@{
  
            Name              = $DomainName
            RecoveryUserEmail = $Null
            Status            = $Null
            Details           = $Null
            Exception         = $Null
                                  
        }      

        # Validate domain name
        try {

            "[{0}] Validating SAML SSO domain '{1}'" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName | Write-Verbose

            $Uri = (Get-SAMLValidateDomainUri) + $DomainName
            $ValidateDomain = Invoke-HPEGLWebRequest -Uri $Uri -method 'Get' 

        }
        catch { 

            if ($_ -match "Error status Code: 412") {

                if ($WhatIf) {
                    $ErrorMessage = "Domain {0} already claimed by the user for the workspace" -f $DomainName
                    Write-warning $ErrorMessage
                    return
                }
                else {
                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Domain {0} already claimed by the user for the workspace" -f $DomainName
                    $objStatus.Exception = $Global:HPECOMInvokeReturnData

                }
            }
        }
        
        if ($ValidateDomain.message -ne "Domain valid." -or $objStatus.Status -eq "Failed") {

            # Must return a message if domain is not valid 
            "[{0}] SAML SSO domain '{1}' is not valid!" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName | Write-Verbose

            if ($WhatIf) {
                $ErrorMessage = "SAML SSO domain '{0}' is not valid! Error: {1}" -f $DomainName, $ValidateDomain.message
                Write-warning $ErrorMessage
                return
            }
            else {

                if ($objStatus.Status -ne "Failed") {

                    $objStatus.Status = "Failed"
                    $objStatus.Details = "SAML SSO domain is not valid!"
                    $objStatus.Exception = $ValidateDomain.message
                }
            }
        }
        else {

            $FileFound = $false

            # Check if the MetadataSource is a URL
            if ($MetadataSource -match '^https?://') {

                "[{0}] MetadataSource detected as a URL" -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                # Read the XML file from the URL
                try {
                    [xml]$MetadataXMLFile = Invoke-WebRequest -Uri $MetadataSource -UseBasicParsing -Method Get -ContentType 'application/xml' | Select-Object -ExpandProperty Content
                    
                    "[{0}] MetadataSource file has been found!" -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                    $FileFound = $True
                }
                catch {
                    $MetadataXMLFile = $Null
                }

            }
            else {

                "[{0}] MetadataSource detected as a file" -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                # Test the path of the XML file 
                $FileFound = Test-Path -Path $MetadataSource

                if ($FileFound -eq $True) {

                    "[{0}] MetadataSource file has been found!" -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                    [xml]$MetadataXMLFile = Get-Content $MetadataSource -Raw

                }
            }
        

            if ($FileFound -eq $False) {

                "[{0}] Error! MetadataSource cannot be found!" -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose

                # Must return a message if Metadata file is not found
                if ($WhatIf) {
                    $ErrorMessage = "Metadata XML file cannot be found at '{0}'" -f $MetadataSource
                    Write-warning $ErrorMessage
                    return
                }
                else {
                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Metadata file cannot be found at $MetadataSource"
                }                

            } 
            else {
                
                "[{0}] Metadata file content: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $MetadataXMLFile | Write-Verbose
    
                $EntityID = $MetadataXMLFile.EntityDescriptor.entityID
                $LoginURL = $MetadataXMLFile.EntityDescriptor.IDPSSODescriptor.SingleSignOnService | Where-Object { $_.Binding -eq "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" } | Select-Object -ExpandProperty Location
                $LogoutURL = $MetadataXMLFile.EntityDescriptor.IDPSSODescriptor.SingleLogoutService | Where-Object { $_.Binding -eq "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" } | Select-Object -ExpandProperty Location
                $SigningCertificate = $MetadataXMLFile.EntityDescriptor.IDPSSODescriptor.KeyDescriptor | Where-Object { $_.use -eq "signing" } | Select-Object -ExpandProperty KeyInfo | Select-Object -ExpandProperty X509Data | Select-Object -ExpandProperty X509Certificate

           
                # Valid metadata file
    
                $SamlIDPConfig = [PSCustomObject]@{
                    entity_id           = $EntityID
                    login_url           = $LoginURL
                    logout_url          = $LogoutURL
                    signing_certificate = $SigningCertificate
                   
                }
                
                $Payload = $SamlIDPConfig | ConvertTo-Json -Depth 5
    
                try {
                    $Uri = (Get-SAMLValidateMetadataUri) + $DomainName
                    $ValidateMetadata = Invoke-HPEGLWebRequest -Uri $Uri -method 'Post' -ContentType application/json -Body $Payload
        
                }
                catch {    
                    $PSCmdlet.ThrowTerminatingError($_)
            
                }
    
                if ($ValidateMetadata.message -ne "Metadata Valid") {
                    # Must return a message if domain is not valid 
                    "[{0}] Metadata is not valid!" -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose
        
                    if ($WhatIf) {
                        $ErrorMessage = "Metadata is not valid! Message: {1} - Error code: {2}" -f $ValidateMetadata.message, $ValidateMetadata.error_code
                        Write-warning $ErrorMessage
                        return
                    }
                    else {
                        $objStatus.Status = "Failed"
                        $objStatus.Details = "Metadata is not valid! Message: {0}" -f $ValidateMetadata.message
                        $objStatus.Exception = $ValidateMetadata.error_code
                    }
                }
                else {
    
                    if ($AuthorizationMethod -eq "SAML") {
                        
                        $SSOMode = "AUTHORIZATION"
                    }
                    else {
                        $SSOMode = "AUTHENTICATION_ONLY"
                    }
    
    
                    if ($DisableRecoveryUser) {

                        if ($AuthorizationMethod -eq "Locally-Managed") {
                            
                            $Payload = [PSCustomObject]@{
                                domain               = $DomainName
                                authorization_method = $AuthorizationMethod
                                saml_idp_config      = $SamlIDPConfig
                                attribute_mapping    = @{
                                    email                = $EmailAttribute
                                    first_name           = $FirstNameAttribute
                                    last_name            = $LastNameAttribute
                                    idle_session_timeout = $IdleSessionTimeout
                                }
                                recovery_user        = $Null
                                sso_mode             = $SSOMode
        
                            } | ConvertTo-Json -Depth 5
                        }
                        else {

                            $Payload = [PSCustomObject]@{
                                domain               = $DomainName
                                authorization_method = $AuthorizationMethod
                                saml_idp_config      = $SamlIDPConfig
                                attribute_mapping    = @{
                                    email                = $EmailAttribute
                                    first_name           = $FirstNameAttribute
                                    last_name            = $LastNameAttribute
                                    idle_session_timeout = $IdleSessionTimeout
                                    hpe_ccs_attribute    = $GreenLakeAttribute
                                }
                                recovery_user        = $Null
                                sso_mode             = $SSOMode
        
                            } | ConvertTo-Json -Depth 5
                        }
                    }
                    else {
    
                        # Create recovery user email account using workspace ID       
                        $RecoveryUserEmail = "sso_re_" + $Global:HPEGreenLakeSession.workspaceId + "@" + $DomainName
    
                        $objStatus.RecoveryUserEmail = $RecoveryUserEmail

                        if ($AuthorizationMethod -eq "Locally-Managed") {

                            $Payload = [PSCustomObject]@{
                                domain               = $DomainName
                                authorization_method = $AuthorizationMethod
                                saml_idp_config      = $SamlIDPConfig
                                attribute_mapping    = @{
                                    email                = $EmailAttribute
                                    first_name           = $FirstNameAttribute
                                    last_name            = $LastNameAttribute
                                    idle_session_timeout = $IdleSessionTimeout
                                }
                                recovery_user        = @{
                                    username       = $RecoveryUserEmail
                                    password       = $RecoveryUserPassword
                                    recovery_email = $PointOfContactEmail
                                    
                                }
                                sso_mode             = $SSOMode
                            } | ConvertTo-Json -Depth 5
                        }
                        else {
                            
                            $Payload = [PSCustomObject]@{
                                domain               = $DomainName
                                authorization_method = $AuthorizationMethod
                                saml_idp_config      = $SamlIDPConfig
                                attribute_mapping    = @{
                                    email                = $EmailAttribute
                                    first_name           = $FirstNameAttribute
                                    last_name            = $LastNameAttribute
                                    idle_session_timeout = $IdleSessionTimeout
                                    hpe_ccs_attribute    = $GreenLakeAttribute
                                }
                                recovery_user        = @{
                                    username       = $RecoveryUserEmail
                                    password       = $RecoveryUserPassword
                                    recovery_email = $PointOfContactEmail
                                    
                                }
                                sso_mode             = $SSOMode
                            } | ConvertTo-Json -Depth 5
                        }        
                    }
        
                    $Uri = Get-AuthnSAMLSSOConfigUri 
    
    
                    try {
    
                        $counter = 1
    
                        # Define the spinning cursor characters
                        $spinner = @('|', '/', '-', '\')
                        
                        # Get the current width of the terminal window                
                        $terminalWidth = (Get-Host).UI.RawUI.WindowSize.Width                    
                        
                        # Create a clear line string based on the terminal width to ensure the entire line is overwritten
                        if (-not $psISE) {
                            $clearLine = " " * ($terminalWidth - 1)
                        }   
    
                        $Response = Invoke-HPEGLWebRequest -Method 'POST' -Body $Payload -Uri $Uri -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference

                        if (-not $WhatIf) {

                            $TaskTrackingId = $Response.task_tracking_id

                            $Uri = (Get-AuthnSAMLSSOConfigTaskTrackerUri) + $TaskTrackingId

                            do {
            
                                $subcounter = 0
            
                                do {
            
                                    $TaskTrackingStatus = Invoke-HPEGLWebRequest -Uri $Uri -method GET 
            
                                    # Calculate the current spinner character
                                    $spinnerChar = $spinner[$subcounter % $spinner.Length]
                                    
                                    # Display the spinner character, replacing the previous content
                                    $output = "Adding SAML SSO domain '{0}' to the workspace: {1} {2}" -f $DomainName, $TaskTrackingStatus.Status, $spinnerChar
            
                                    if (-not $psISE) {
                                        Write-Host "`r$clearLine`r$output" -NoNewline -ForegroundColor Yellow
                                    }
                                    else {
                                        Write-Host "$output" -ForegroundColor Yellow
                                    }
            
                                    $subcounter++
                                    Start-Sleep -Seconds 1
                                    
                                    
                                } while (
                                    $TaskTrackingStatus.Status -eq "IN_PROGRESS"
                                )
            
                                # Increment counter
                                $counter++
            
                            } until ($TaskTrackingStatus.Status -eq "DONE" -or $counter -gt 10)       
        
                            # Clear the message after do/until is complete
                            if (-not $psISE) {
                                "`r$clearLine`r" | Write-Host -NoNewline                    
                            }
                            
                            if ($counter -gt 10) {
                                
                                $objStatus.Status = "Failed"
                                $objStatus.Details = "Failed to add the SAML SSO domain to the workspace."
        
                            }
                            else {
        
                                "[{0}] Adding SAML SSO domain '{1}' to the workspace... status: {2}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName, $TaskTrackingStatus.Status | Write-Verbose
                                
                                if (-not $WhatIf) {
        
                                    $objStatus.Status = $TaskTrackingStatus.status
                                    $objStatus.Details = $TaskTrackingStatus.response.data.message
                                    
                                }
                            }
                        }    
                    }
                    catch {
    
                        if (-not $WhatIf) {
    
                            # Clear the message after do/until is complete
                            if (-not $psISE) {
                                "`r$clearLine`r" | Write-Host -NoNewline                    
                            }
        
                            $objStatus.Status = "Failed"
                            $objStatus.Details = "Failed to add the SAML SSO domain to the workspace."
                            $objStatus.Exception = $Global:HPECOMInvokeReturnData 
                        }
                    }   
                }
            }
        }

        [void] $AddSAMLSSODomainStatus.add($objStatus)

    }

    end {

        if (-not $WhatIf) {

            $AddSAMLSSODomainStatus = Invoke-RepackageObjectWithType -RawObject $AddSAMLSSODomainStatus -ObjectName "ObjStatus.NRSDE" 
            Return $AddSAMLSSODomainStatus
        }
    }
}

Function Set-HPEGLWorkspaceSAMLSSODomain {
    <#
    .SYNOPSIS
    Sets details of the SAML SSO domain.

    .DESCRIPTION
    This function modifies the SAML SSO information of a domain configured in the workspace. It can set the SAML attributes, upload the metadata file for a specified domain, and update the X509 certificate if requested.

    .PARAMETER DomainName
    Specifies the name of the SAML SSO domain to set.

    .PARAMETER X509Certificate
    Specifies the new X509 certificate for the specified domain.

    .PARAMETER EmailAttribute
    Specifies the new email address attribute for the specified domain.

    .PARAMETER FirstNameAttribute
    Specifies the new first name attribute for the specified domain.

    .PARAMETER LastNameAttribute
    Specifies the new last name attribute for the specified domain.

    .PARAMETER GreenLakeAttribute
    Specifies the new HPE GreenLake attribute for the specified domain.

    .PARAMETER IdleSessionTimeout
    Specifies the new idle session timeout attribute for the specified domain.

    .PARAMETER LoginURL
    Specifies the new login URL for the specified domain.

    .PARAMETER LogoutURL
    Specifies the new logout URL for the specified domain.

    .PARAMETER WhatIf
    Displays the raw REST API call that would be executed, without actually sending the request. Useful for understanding the native REST API interactions with GLP.

    .EXAMPLE
    $certificate = "MIIE5DCCAsygAwIBAgIQUK3zqnGiHrNBkAvI5tS8bDANBgkqhkiG9w0BAQsFADAuMSwwKgYDVQQDEyN....xkUqNXSHY="
    Set-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -X509Certificate $certificate

    Sets the new X509 certificate for the SAML SSO domain "example.com".

    .EXAMPLE
    Set-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -EmailAttribute "email"

    Sets the new email address attribute for the SAML SSO domain "example.com".

    .EXAMPLE
    Set-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -FirstNameAttribute "FirstName"

    Sets the new first name attribute for the SAML SSO domain "example.com".

    .EXAMPLE
    Set-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -LastNameAttribute "LastName"

    Sets the new last name attribute for the SAML SSO domain "example.com".

    .EXAMPLE
    Set-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -GreenLakeAttribute "GreenLakeAttribute"

    Sets the new HPE GreenLake attribute for the SAML SSO domain "example.com".

    .EXAMPLE
    Set-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" -IdleSessionTimeout 30

    Sets the new idle session timeout attribute for the SAML SSO domain "example.com".

    #>

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory)]
        [String]$DomainName,

        [String]$X509Certificate,

        [String]$EmailAttribute,

        [String]$FirstNameAttribute,

        [String]$LastNameAttribute,

        [String]$GreenLakeAttribute,

        [String]$LoginURL,

        [String]$LogoutURL,

        [Int]$IdleSessionTimeout,

        [Switch]$WhatIf
    )

    Begin {
       
        $Caller = (Get-PSCallStack)[1].Command

        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose

        $ObjectStatusList = [System.Collections.ArrayList]::new()

    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        # Build object for the output
        $objStatus = [pscustomobject]@{
            Name      = $DomainName
            Status    = $Null
            Details   = $Null
            Exception = $Null
                          
        }
        

        [void] $ObjectStatusList.add($objStatus)

    }

    end {

        try {
            
            $DomainFound = Get-HPEGLWorkspaceSAMLSSODomain -DomainName $DomainName
            
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_)                
        }
        
        
        foreach ($Object in $ObjectStatusList) {
            
            $Uri = Get-AuthnSAMLSSOConfigUri

            if (-not $DomainFound) {

                # Must return a message if domain not found
                $Object.Status = "Failed"
                $Object.Details = "SAML SSO domain cannot be found in the workspace!"

                if ($WhatIf) {
                    $ErrorMessage = "SAML SSO domain '{0}': Resource cannot be found in the workspace!" -f $Object.Name
                    Write-warning $ErrorMessage
                    continue
                }

            }
            else {

                if ($PSBoundParameters.ContainsKey('EmailAttribute')) {

                    $DomainFound.attribute_mapping.email = $EmailAttribute
                
                }

                if ($PSBoundParameters.ContainsKey('FirstNameAttribute')) {

                    $DomainFound.attribute_mapping.first_name = $FirstNameAttribute
                
                }

                if ($PSBoundParameters.ContainsKey('LastNameAttribute')) {

                    $DomainFound.attribute_mapping.last_name = $LastNameAttribute
                
                }

                if ($PSBoundParameters.ContainsKey('GreenLakeAttribute')) {

                    $DomainFound.attribute_mapping.hpe_ccs_attribute = $GreenLakeAttribute
                
                }

                if ($PSBoundParameters.ContainsKey('IdleSessionTimeout')) {

                    $DomainFound.attribute_mapping.idle_session_timeout = $IdleSessionTimeout
                
                }

                if ($PSBoundParameters.ContainsKey('X509Certificate')) {

                    $DomainFound.saml_idp_config.signing_certificate = $X509Certificate
                
                }
      
                if ($PSBoundParameters.ContainsKey('LoginURL')) {

                    $DomainFound.saml_idp_config.login_url = $LoginURL
                
                }
      
                if ($PSBoundParameters.ContainsKey('LogoutURL')) {

                    $DomainFound.saml_idp_config.logout_url = $LogoutURL
                
                }

                
                $DomainFound | Add-Member -Type NoteProperty -Name "auth_method" -Value "SAML / SSO"
                $DomainFound | Add-Member -Type NoteProperty -Name "edited" -Value $True
                
                # Exclude the PSObject.TypeNames property
                $DomainFound = $DomainFound | Select-Object -Property * -ExcludeProperty PSObject.TypeNames

                $Payload = $DomainFound | ConvertTo-Json -Depth 5

                try {

                    $counter = 1
    
                    # Define the spinning cursor characters
                    $spinner = @('|', '/', '-', '\')
                    
                    # Get the current width of the terminal window                
                    $terminalWidth = (Get-Host).UI.RawUI.WindowSize.Width                    
                    
                    # Create a clear line string based on the terminal width to ensure the entire line is overwritten
                    if (-not $psISE) {
                        $clearLine = " " * ($terminalWidth - 1)
                    }   
                    
                    $Response = Invoke-HPEGLWebRequest -Method PUT -Uri $Uri -Body $Payload -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference

                    if (-not $WhatIf) {

                        $TaskTrackingId = $Response.task_tracking_id

                        $Uri = (Get-AuthnSAMLSSOConfigTaskTrackerUri) + $TaskTrackingId

                        do {
        
                            $subcounter = 0
        
                            do {
        
                                $TaskTrackingStatus = Invoke-HPEGLWebRequest -Uri $Uri -method GET 
        
                                # Calculate the current spinner character
                                $spinnerChar = $spinner[$subcounter % $spinner.Length]
                                
                                # Display the spinner character, replacing the previous content
                                $output = "Setting SAML SSO domain '{0}': {1} {2}" -f $DomainName, $TaskTrackingStatus.Status, $spinnerChar
        
                                if (-not $psISE) {
                                    Write-Host "`r$clearLine`r$output" -NoNewline -ForegroundColor Yellow
                                }
                                else {
                                    Write-Host "$output" -ForegroundColor Yellow
                                }
        
                                $subcounter++
                                Start-Sleep -Seconds 1
                                
                                
                            } while (
                                $TaskTrackingStatus.Status -eq "IN_PROGRESS"
                            )
        
                            # Increment counter
                            $counter++
        
                        } until ($TaskTrackingStatus.Status -eq "DONE" -or $counter -gt 10)       
    
                        # Clear the message after do/until is complete
                        if (-not $psISE) {
                            "`r$clearLine`r" | Write-Host -NoNewline                    
                        }
                        
                        if ($counter -gt 10) {
                            
                            $objStatus.Status = "Failed"
                            $objStatus.Details = "Failed to set the SAML SSO domain."
    
                        }
                        else {
    
                            "[{0}] SAML SSO domain '{1}' successfully updated. Status: {2}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName, $TaskTrackingStatus.Status | Write-Verbose
                            
                            if (-not $WhatIf) {
    
                                $objStatus.Status = $TaskTrackingStatus.status
                                $objStatus.Details = $TaskTrackingStatus.response.data.message
                                
                            }
                        }
                    }
                }
                catch {

                    if (-not $WhatIf) {

                        # Clear the message after do/until is complete
                        if (-not $psISE) {
                            "`r$clearLine`r" | Write-Host -NoNewline                    
                        }

                        $Object.Status = "Failed"
                        $Object.Details = "SAML SSO domain cannot be updated!"
                        $Object.Exception = $_.Exception.message 
                    }
                }
            }
        }

        if (-not $WhatIf) {

            $ObjectStatusList = Invoke-RepackageObjectWithType -RawObject $ObjectStatusList -ObjectName "ObjStatus.NSDE" 
            Return $ObjectStatusList
        }
    }
}

Function Remove-HPEGLWorkspaceSAMLSSODomain {
    <#
    .SYNOPSIS
    Removes a SAML SSO domain.

    .DESCRIPTION
    This function removes a SAML SSO domain from the workspace. It can remove the domain by name or by the domain object.

    .PARAMETER DomainName
    Specifies the name of the SAML SSO domain to remove.

    .PARAMETER WhatIf
    Displays the raw REST API call that would be executed, without actually sending the request. Useful for understanding the native REST API interactions with GLP.

   .EXAMPLE
    Remove-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com"

    Removes the SAML SSO domain "example.com" from the workspace.

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain -DomainName "example.com" | Remove-HPEGLWorkspaceSAMLSSODomain 

    Removes the SAML SSO domain "example.com" from the workspace.
    
    .INPUTS
    System.Collections.ArrayList
        A list of domains obtained from 'Get-HPEGLWorkspaceSAMLSSODomain'.

    .OUTPUTS
    System.Collections.ArrayList
        A custom status object or array of objects containing the following keys:
        * Name - The name of the SAML SSO domain attempted to be removed.
        * Status - The status of the removal attempt (Failed for HTTP error return; Complete if removal is successful).
        * Details - More information about the status.
        * Exception - Information about any exceptions generated during the operation.

    #>

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, ValueFromPipelineByPropertyName)]
        [alias("domain")]
        [String]$DomainName,

        [Switch]$WhatIf
    )

    Begin {
       
        $Caller = (Get-PSCallStack)[1].Command

        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose

        $RemoveSAMLSSODomainStatus = [System.Collections.ArrayList]::new()

    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        try {
            $DomainNameFound = Get-HPEGLWorkspaceSAMLSSODomain -DomainName $DomainName

        }
        catch {    
            $PSCmdlet.ThrowTerminatingError($_)
        
        }

        # Build object for the output
        $objStatus = [pscustomobject]@{
            Name      = $DomainName
            Status    = $Null
            Details   = $Null
            Exception = $Null
                          
        }

        if (-not $DomainNameFound) {
            # Must return a message if domain not present
            "[{0}] SAML SSO domain '{1}' cannot be found in the workspace!" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName | Write-Verbose
        
            if ($WhatIf) {
                $ErrorMessage = "SAML SSO domain '{0}': Resource cannot be found in the workspace!" -f $DomainName
                Write-warning $ErrorMessage
                return
            }
            else {
                $objStatus.Status = "Warning"
                $objStatus.Details = "SAML SSO domain cannot be found in the workspace!"
            }
        }
        else {

            $Uri = (Get-AuthnSAMLSSOConfigUri) + "/" + $DomainName

            try {

                $counter = 1

                # Define the spinning cursor characters
                $spinner = @('|', '/', '-', '\')
                
                # Get the current width of the terminal window                
                $terminalWidth = (Get-Host).UI.RawUI.WindowSize.Width                    
                
                # Create a clear line string based on the terminal width to ensure the entire line is overwritten
                if (-not $psISE) {
                    $clearLine = " " * ($terminalWidth - 1)
                }


                $Response = Invoke-HPEGLWebRequest -Uri $Uri -method DELETE -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference    

                $TaskTrackingId = $Response.task_tracking_id

                $Uri = (Get-AuthnSAMLSSOConfigTaskTrackerUri) + $TaskTrackingId

                do {

                    $subcounter = 0

                    do {

                        $TaskTrackingStatus = Invoke-HPEGLWebRequest -Uri $Uri -method GET 

                        # Calculate the current spinner character
                        $spinnerChar = $spinner[$subcounter % $spinner.Length]
                        
                        # Display the spinner character, replacing the previous content
                        $output = "Removing SAML SSO domain '{0}' from the workspace: {1} {2}" -f $DomainName, $TaskTrackingStatus.Status, $spinnerChar

                        if (-not $psISE) {
                            Write-Host "`r$clearLine`r$output" -NoNewline -ForegroundColor Yellow
                        }
                        else {
                            Write-Host "$output" -ForegroundColor Yellow
                        }

                        $subcounter++
                        Start-Sleep -Seconds 1
                        
                        
                    } while (
                        $TaskTrackingStatus.Status -eq "IN_PROGRESS"
                    )

                    # Increment counter
                    $counter++

                } until ($TaskTrackingStatus.Status -eq "DONE" -or $counter -gt 10)       
                
                # Clear the message after do/until is complete
                if (-not $psISE) {
                    "`r$clearLine`r" | Write-Host -NoNewline                    
                }
                
                if ($counter -gt 10) {
                    
                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Failed to remove the SAML SSO domain from the workspace."

                }
                else {

                    "[{0}] Removing SAML SSO domain '{1}' from the workspace... status: {2}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName, $TaskTrackingStatus.Status | Write-Verbose
                    
                    if (-not $WhatIf) {

                        $objStatus.Status = $TaskTrackingStatus.status
                        $objStatus.Details = $TaskTrackingStatus.response.data.message
                        
                    }
                }
            }
            catch {

                if (-not $WhatIf) {

                    # Clear the message after do/until is complete
                    if (-not $psISE) {
                        "`r$clearLine`r" | Write-Host -NoNewline                    
                    }

                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Failed to remove the SAML SSO domain from the workspace."
                    $objStatus.Exception = $Global:HPECOMInvokeReturnData 
                }
            
            }   
        } 

        [void] $RemoveSAMLSSODomainStatus.add($objStatus)



    }

    end {


        if (-not $WhatIf) {

            $RemoveSAMLSSODomainStatus = Invoke-RepackageObjectWithType -RawObject $RemoveSAMLSSODomainStatus -ObjectName "ObjStatus.NSDE" 
            Return $RemoveSAMLSSODomainStatus
        }
    }
}

Function Send-HPEGLWorkspaceSAMLSSODomainNotifications {
    <#
    .SYNOPSIS
    Send a notification to all active users part of the SAML SSO domain that has been enabled in the workspace. 

    .DESCRIPTION
    This function sends an email to notify all active users part of a configured SAML SSO Domain that Single sign-on (SSO) has been enabled for the workspace in HPE GreenLake.
    
    .PARAMETER DomainName
    Specifies the name of the SAML SSO domain to send the notification.

    .PARAMETER WhatIf
    Displays the raw REST API call that would be executed, without actually sending the request. Useful for understanding the native REST API interactions with GLP.

   .EXAMPLE
    Send-HPEGLWorkspaceSAMLSSODomainNotifications -DomainName "example.com"

    Sends a notification to all active users part of the SAML SSO domain "example.com" that SSO has been enabled for the workspace.

    .EXAMPLE
    Get-HPEGLWorkspaceSAMLSSODomain | Send-HPEGLWorkspaceSAMLSSODomainNotifications

    Sends a notification to all active users in the various SAML SSO domains, informing them that SSO has been enabled for the workspace.

    .INPUTS
    System.Collections.ArrayList
        List of domains retrieved using 'Get-HPEGLWorkspaceSAMLSSODomain'.

    .OUTPUTS
    System.Collections.ArrayList
        A custom status object or array of objects containing the following keys:
        * Name - The name of the SAML SSO domain where the notification was sent.
        * Status - The status of the notification attempt (Failed for HTTP error return; Complete if successful).
        * Details - More information about the status.
        * Exception - Information about any exceptions generated during the operation.

    #>

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, ValueFromPipelineByPropertyName)]
        [alias("domain")]
        [String]$DomainName,

        [Switch]$WhatIf
    )

    Begin {
       
        $Caller = (Get-PSCallStack)[1].Command

        "[{0}] Called from: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), $Caller | Write-Verbose

        $SAMLSSODomainNotificationStatus = [System.Collections.ArrayList]::new()

    }

    Process {

        "[{0}] Bound PS Parameters: {1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($PSBoundParameters | out-string) | Write-Verbose

        try {
            $DomainNameFound = Get-HPEGLWorkspaceSAMLSSODomain -DomainName $DomainName

        }
        catch {    
            $PSCmdlet.ThrowTerminatingError($_)
        
        }

        # Build object for the output
        $objStatus = [pscustomobject]@{
            Name      = $DomainName
            Status    = $Null
            Details   = $Null
            Exception = $Null
                          
        }

        if (-not $DomainNameFound) {
            # Must return a message if domain not present
            "[{0}] SAML SSO domain '{1}' cannot be found in the workspace!" -f $MyInvocation.InvocationName.ToString().ToUpper(), $DomainName | Write-Verbose
        
            if ($WhatIf) {
                $ErrorMessage = "SAML SSO domain '{0}': Resource cannot be found in the workspace!" -f $DomainName
                Write-warning $ErrorMessage
                return
            }
            else {
                $objStatus.Status = "Warning"
                $objStatus.Details = "SAML SSO domain cannot be found in the workspace!"
            }
        }
        else {

            $Uri = (Get-AccountSAMLNotifyUsersUri) + $DomainName

            try {

                $Response = Invoke-HPEGLWebRequest -Uri $Uri -method POST -WhatIfBoolean $WhatIf -Verbose:$VerbosePreference    

                if ($Global:HPECOMInvokeReturnData.StatusCode -eq 204) {
                    $objStatus.Status = "Complete"
                    $objStatus.Details = "Notification sent successfully to users of the SAML SSO domain."
                } 
                else {
                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Unexpected response code: $($Global:HPECOMInvokeReturnData.StatusCode)"
                }
                
            }
            catch {

                if (-not $WhatIf) {

                    $objStatus.Status = "Failed"
                    $objStatus.Details = "Failed to send the notification to users of the SAML SSO domain."
                    $objStatus.Exception = $Global:HPECOMInvokeReturnData 
                }            
            }   
        } 

        [void] $SAMLSSODomainNotificationStatus.add($objStatus)



    }

    end {

        if (-not $WhatIf) {

            $SAMLSSODomainNotificationStatus = Invoke-RepackageObjectWithType -RawObject $SAMLSSODomainNotificationStatus -ObjectName "ObjStatus.NSDE" 
            Return $SAMLSSODomainNotificationStatus
        }
    }
}


# Private functions (not exported)
function Invoke-RepackageObjectWithType {   
    Param   (   
        $RawObject,
        $ObjectName,
        [boolean]   $WhatIf = $false
    )
    process {
        if ( $RawObject ) {
            $OutputObject = @()
            if ( $WhatIf ) {
                Return 
            }
            foreach ( $RawElementObject in $RawObject ) {

                # "[{0}] Element: `n{1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($RawElementObject | out-string) | write-verbose

                $DataSetType = "HPEGreenLake.$ObjectName"
                $RawElementObject.PSTypeNames.Insert(0, $DataSetType)
                # "[{0}] Element PSTypeName set: `n{1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($RawElementObject.PSTypeNames[0] | out-string)| write-verbose
                # "[{0}] Element PSObject TypeNames set: `n{1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($RawElementObject.PSObject.TypeNames[0] | out-string)| write-verbose
                
                $RawElementObject.PSObject.TypeNames.Insert(0, $DataSetType)
                # "[{0}] Element PSObject TypeNames set: `n{1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($RawElementObject.PSObject.TypeNames[0] | out-string)| write-verbose

                $OutputObject += $RawElementObject
            }

            # "[{0}] Object typenames : `n{1}" -f $MyInvocation.InvocationName.ToString().ToUpper(), ($OutputObject.PSObject.TypeNames | Out-String) | write-verbose

            if ($OutputObject.PSObject.TypeNames -notcontains $DataSetType) {

                # "[{0}] Object typenames added using Add-Member as the object is read only" -f $MyInvocation.InvocationName.ToString().ToUpper() | write-verbose

                foreach ($item in $OutputObject) {
                    [void]($item | Add-Member -MemberType NoteProperty -Name PSObject.TypeNames -Value @( $DataSetType) -Force)
                }
            }

            return $OutputObject
        }
        else {
 
            # "[{0}] Null value sent to create object type." -f $MyInvocation.InvocationName.ToString().ToUpper() | Write-Verbose
            
            return
        }
    }   
}


# Export only public functions and aliases
Export-ModuleMember -Function 'Get-HPEGLWorkspace', 'New-HPEGLWorkspace', 'Set-HPEGLWorkspace', 'Get-HPEGLWorkspaceSAMLSSODomain', 'New-HPEGLWorkspaceSAMLSSODomain', 'Set-HPEGLWorkspaceSAMLSSODomain', 'Remove-HPEGLWorkspaceSAMLSSODomain', 'Send-HPEGLWorkspaceSAMLSSODomainNotifications', 'Remove-HPEGLWorkspace' -Alias *


# SIG # Begin signature block
# MIIungYJKoZIhvcNAQcCoIIujzCCLosCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBEOA8bXkBWeUfN
# gN2SgHvx2cHyKS39fBtHBn3tvLEErqCCEfYwggVvMIIEV6ADAgECAhBI/JO0YFWU
# jTanyYqJ1pQWMA0GCSqGSIb3DQEBDAUAMHsxCzAJBgNVBAYTAkdCMRswGQYDVQQI
# DBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoM
# EUNvbW9kbyBDQSBMaW1pdGVkMSEwHwYDVQQDDBhBQUEgQ2VydGlmaWNhdGUgU2Vy
# dmljZXMwHhcNMjEwNTI1MDAwMDAwWhcNMjgxMjMxMjM1OTU5WjBWMQswCQYDVQQG
# EwJHQjEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMS0wKwYDVQQDEyRTZWN0aWdv
# IFB1YmxpYyBDb2RlIFNpZ25pbmcgUm9vdCBSNDYwggIiMA0GCSqGSIb3DQEBAQUA
# A4ICDwAwggIKAoICAQCN55QSIgQkdC7/FiMCkoq2rjaFrEfUI5ErPtx94jGgUW+s
# hJHjUoq14pbe0IdjJImK/+8Skzt9u7aKvb0Ffyeba2XTpQxpsbxJOZrxbW6q5KCD
# J9qaDStQ6Utbs7hkNqR+Sj2pcaths3OzPAsM79szV+W+NDfjlxtd/R8SPYIDdub7
# P2bSlDFp+m2zNKzBenjcklDyZMeqLQSrw2rq4C+np9xu1+j/2iGrQL+57g2extme
# me/G3h+pDHazJyCh1rr9gOcB0u/rgimVcI3/uxXP/tEPNqIuTzKQdEZrRzUTdwUz
# T2MuuC3hv2WnBGsY2HH6zAjybYmZELGt2z4s5KoYsMYHAXVn3m3pY2MeNn9pib6q
# RT5uWl+PoVvLnTCGMOgDs0DGDQ84zWeoU4j6uDBl+m/H5x2xg3RpPqzEaDux5mcz
# mrYI4IAFSEDu9oJkRqj1c7AGlfJsZZ+/VVscnFcax3hGfHCqlBuCF6yH6bbJDoEc
# QNYWFyn8XJwYK+pF9e+91WdPKF4F7pBMeufG9ND8+s0+MkYTIDaKBOq3qgdGnA2T
# OglmmVhcKaO5DKYwODzQRjY1fJy67sPV+Qp2+n4FG0DKkjXp1XrRtX8ArqmQqsV/
# AZwQsRb8zG4Y3G9i/qZQp7h7uJ0VP/4gDHXIIloTlRmQAOka1cKG8eOO7F/05QID
# AQABo4IBEjCCAQ4wHwYDVR0jBBgwFoAUoBEKIz6W8Qfs4q8p74Klf9AwpLQwHQYD
# VR0OBBYEFDLrkpr/NZZILyhAQnAgNpFcF4XmMA4GA1UdDwEB/wQEAwIBhjAPBgNV
# HRMBAf8EBTADAQH/MBMGA1UdJQQMMAoGCCsGAQUFBwMDMBsGA1UdIAQUMBIwBgYE
# VR0gADAIBgZngQwBBAEwQwYDVR0fBDwwOjA4oDagNIYyaHR0cDovL2NybC5jb21v
# ZG9jYS5jb20vQUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNAYIKwYBBQUHAQEE
# KDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wDQYJKoZI
# hvcNAQEMBQADggEBABK/oe+LdJqYRLhpRrWrJAoMpIpnuDqBv0WKfVIHqI0fTiGF
# OaNrXi0ghr8QuK55O1PNtPvYRL4G2VxjZ9RAFodEhnIq1jIV9RKDwvnhXRFAZ/ZC
# J3LFI+ICOBpMIOLbAffNRk8monxmwFE2tokCVMf8WPtsAO7+mKYulaEMUykfb9gZ
# pk+e96wJ6l2CxouvgKe9gUhShDHaMuwV5KZMPWw5c9QLhTkg4IUaaOGnSDip0TYl
# d8GNGRbFiExmfS9jzpjoad+sPKhdnckcW67Y8y90z7h+9teDnRGWYpquRRPaf9xH
# +9/DUp/mBlXpnYzyOmJRvOwkDynUWICE5EV7WtgwggYaMIIEAqADAgECAhBiHW0M
# UgGeO5B5FSCJIRwKMA0GCSqGSIb3DQEBDAUAMFYxCzAJBgNVBAYTAkdCMRgwFgYD
# VQQKEw9TZWN0aWdvIExpbWl0ZWQxLTArBgNVBAMTJFNlY3RpZ28gUHVibGljIENv
# ZGUgU2lnbmluZyBSb290IFI0NjAeFw0yMTAzMjIwMDAwMDBaFw0zNjAzMjEyMzU5
# NTlaMFQxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxKzAp
# BgNVBAMTIlNlY3RpZ28gUHVibGljIENvZGUgU2lnbmluZyBDQSBSMzYwggGiMA0G
# CSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCbK51T+jU/jmAGQ2rAz/V/9shTUxjI
# ztNsfvxYB5UXeWUzCxEeAEZGbEN4QMgCsJLZUKhWThj/yPqy0iSZhXkZ6Pg2A2NV
# DgFigOMYzB2OKhdqfWGVoYW3haT29PSTahYkwmMv0b/83nbeECbiMXhSOtbam+/3
# 6F09fy1tsB8je/RV0mIk8XL/tfCK6cPuYHE215wzrK0h1SWHTxPbPuYkRdkP05Zw
# mRmTnAO5/arnY83jeNzhP06ShdnRqtZlV59+8yv+KIhE5ILMqgOZYAENHNX9SJDm
# +qxp4VqpB3MV/h53yl41aHU5pledi9lCBbH9JeIkNFICiVHNkRmq4TpxtwfvjsUe
# dyz8rNyfQJy/aOs5b4s+ac7IH60B+Ja7TVM+EKv1WuTGwcLmoU3FpOFMbmPj8pz4
# 4MPZ1f9+YEQIQty/NQd/2yGgW+ufflcZ/ZE9o1M7a5Jnqf2i2/uMSWymR8r2oQBM
# dlyh2n5HirY4jKnFH/9gRvd+QOfdRrJZb1sCAwEAAaOCAWQwggFgMB8GA1UdIwQY
# MBaAFDLrkpr/NZZILyhAQnAgNpFcF4XmMB0GA1UdDgQWBBQPKssghyi47G9IritU
# pimqF6TNDDAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADATBgNV
# HSUEDDAKBggrBgEFBQcDAzAbBgNVHSAEFDASMAYGBFUdIAAwCAYGZ4EMAQQBMEsG
# A1UdHwREMEIwQKA+oDyGOmh0dHA6Ly9jcmwuc2VjdGlnby5jb20vU2VjdGlnb1B1
# YmxpY0NvZGVTaWduaW5nUm9vdFI0Ni5jcmwwewYIKwYBBQUHAQEEbzBtMEYGCCsG
# AQUFBzAChjpodHRwOi8vY3J0LnNlY3RpZ28uY29tL1NlY3RpZ29QdWJsaWNDb2Rl
# U2lnbmluZ1Jvb3RSNDYucDdjMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5zZWN0
# aWdvLmNvbTANBgkqhkiG9w0BAQwFAAOCAgEABv+C4XdjNm57oRUgmxP/BP6YdURh
# w1aVcdGRP4Wh60BAscjW4HL9hcpkOTz5jUug2oeunbYAowbFC2AKK+cMcXIBD0Zd
# OaWTsyNyBBsMLHqafvIhrCymlaS98+QpoBCyKppP0OcxYEdU0hpsaqBBIZOtBajj
# cw5+w/KeFvPYfLF/ldYpmlG+vd0xqlqd099iChnyIMvY5HexjO2AmtsbpVn0OhNc
# WbWDRF/3sBp6fWXhz7DcML4iTAWS+MVXeNLj1lJziVKEoroGs9Mlizg0bUMbOalO
# hOfCipnx8CaLZeVme5yELg09Jlo8BMe80jO37PU8ejfkP9/uPak7VLwELKxAMcJs
# zkyeiaerlphwoKx1uHRzNyE6bxuSKcutisqmKL5OTunAvtONEoteSiabkPVSZ2z7
# 6mKnzAfZxCl/3dq3dUNw4rg3sTCggkHSRqTqlLMS7gjrhTqBmzu1L90Y1KWN/Y5J
# KdGvspbOrTfOXyXvmPL6E52z1NZJ6ctuMFBQZH3pwWvqURR8AgQdULUvrxjUYbHH
# j95Ejza63zdrEcxWLDX6xWls/GDnVNueKjWUH3fTv1Y8Wdho698YADR7TNx8X8z2
# Bev6SivBBOHY+uqiirZtg0y9ShQoPzmCcn63Syatatvx157YK9hlcPmVoa1oDE5/
# L9Uo2bC5a4CH2RwwggZhMIIEyaADAgECAhEAyDHh+zCQwUNyJV9S6gqqvTANBgkq
# hkiG9w0BAQwFADBUMQswCQYDVQQGEwJHQjEYMBYGA1UEChMPU2VjdGlnbyBMaW1p
# dGVkMSswKQYDVQQDEyJTZWN0aWdvIFB1YmxpYyBDb2RlIFNpZ25pbmcgQ0EgUjM2
# MB4XDTI1MDUyMDAwMDAwMFoXDTI4MDUxOTIzNTk1OVowdzELMAkGA1UEBhMCVVMx
# DjAMBgNVBAgMBVRleGFzMSswKQYDVQQKDCJIZXdsZXR0IFBhY2thcmQgRW50ZXJw
# cmlzZSBDb21wYW55MSswKQYDVQQDDCJIZXdsZXR0IFBhY2thcmQgRW50ZXJwcmlz
# ZSBDb21wYW55MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA37AD03qw
# cmuCQyxRB2VBM7SfUf0SmpQb8iaPvGmxw5uoDBY3gdC/3Xq/rfM3ndCn03hNdGyu
# cpC7tD4zmel6yYqxyXDVr45Jd2cz9jFXoYTOMcuDV6I6CvU/EnbFxWhv0VCp+2Ip
# z4+uJGI6aVlMpFpLbgPjhp9ogd/89HEyi1FkSFoarnvxxaXm93S81k7FD/4Edtvu
# muGI4V8p39GfbCiMuHku8BzSQ2g86gWFnOaVhY6h4XWvEmE8LPYkU/STrej28Flg
# kSt9f/Jg6+dvRKm92uN2Z760Eql9+DTWkGmGe4YrIyD25XDa07sS9tIpVWzLrGOy
# ecaVpJwVVBqCadXDgkgTYKw/UlS+cEqsviT6wREGl4aX/GbeNO6Y4oDTTYkabW3p
# eg1ku0v90oDqzoTaWEE5ly2UajvXIgzpFLLXqpR6GYkv/y3ZJV0chBqRtAObebH7
# XOBa5a2kqMBw0gkIZBJHd8+PCPH/U7eJkeKXtGGj2uTudcGjZgOjVcFYdCRnufJd
# isrV7bj0Hzghcv3QyRXL3rRjcNb4ccKNnSgF/8cmiTVpvFHTfUKsYdkbM6wsbjXR
# dJNADjGOYRms7tKsii3/oXO+2S1Um7yomBZQ2+wVRCY6MrRX1onDKid5t5AyWFtR
# u0aQcdBmHG6JeDiQ3Hrb2g9kZhuFkgABVBkCAwEAAaOCAYkwggGFMB8GA1UdIwQY
# MBaAFA8qyyCHKLjsb0iuK1SmKaoXpM0MMB0GA1UdDgQWBBQH4rUE0gsy8LW2G3vm
# oYtOnZ8zEjAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAK
# BggrBgEFBQcDAzBKBgNVHSAEQzBBMDUGDCsGAQQBsjEBAgEDAjAlMCMGCCsGAQUF
# BwIBFhdodHRwczovL3NlY3RpZ28uY29tL0NQUzAIBgZngQwBBAEwSQYDVR0fBEIw
# QDA+oDygOoY4aHR0cDovL2NybC5zZWN0aWdvLmNvbS9TZWN0aWdvUHVibGljQ29k
# ZVNpZ25pbmdDQVIzNi5jcmwweQYIKwYBBQUHAQEEbTBrMEQGCCsGAQUFBzAChjho
# dHRwOi8vY3J0LnNlY3RpZ28uY29tL1NlY3RpZ29QdWJsaWNDb2RlU2lnbmluZ0NB
# UjM2LmNydDAjBggrBgEFBQcwAYYXaHR0cDovL29jc3Auc2VjdGlnby5jb20wDQYJ
# KoZIhvcNAQEMBQADggGBAIax+Yaj5EciDlztft4iAfD2CtIWEF0cxR+UbbvJEs86
# 5wyoO3ZQoujr0FJ+P5fjDKLbamHrEWmyoD2YC4lzecmnFOnY0y4uJ9zBY8B6X6TU
# 9e6+TfZtlXd44YffXYAfoLX+uYjVJcZOaMuXF61+CFpjLJjepsD8m1gdj5QUz2sH
# 6GOfU6mEm8SHvKpgPMV/yhEKqgjlenY6Ao49RkxnDuvRlMP8SFPB+8bxiLegEdGa
# ei8nSr/j5YeDZFevUJ696T4W45QGrwAhBBpbKDz6CzlImC1b2C8Bp02XBAsOQs/u
# CIaQv5XxUmVxmb85tDJkd7QfqHo2z1T2NYMkvXUcSClYRuVxxC/frpqcrxS9O9xE
# v65BoUztAJSXsTdfpUjWeNOnhq8lrwa2XAD3fbagNF6ElsBiNDSbwHCG/iY4kAya
# VpbAYtaa6TfzdI/I0EaCX5xYRW56ccI2AnbaEVKz9gVjzi8hBLALlRhrs1uMFtPj
# nZ+oA+rbZZyGZkz3xbUYKTGCG/4wghv6AgEBMGkwVDELMAkGA1UEBhMCR0IxGDAW
# BgNVBAoTD1NlY3RpZ28gTGltaXRlZDErMCkGA1UEAxMiU2VjdGlnbyBQdWJsaWMg
# Q29kZSBTaWduaW5nIENBIFIzNgIRAMgx4fswkMFDciVfUuoKqr0wDQYJYIZIAWUD
# BAIBBQCgfDAQBgorBgEEAYI3AgEMMQIwADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGC
# NwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQx
# IgQg2CJE3z3Py6B37jIWi3ZtRyZzVpY5w5kThyx/CqvtF5QwDQYJKoZIhvcNAQEB
# BQAEggIAgopW6JF4w1NLLW6/A4EdR6oCx0LluHy1B/eIco8zUg6iT2MkYBnoNWNC
# 4YCYS1ctAstcLYBtdpi9fyMstQBhiA0r+4UniyIHf+zFc8PyMvULgT7AiCacpDKD
# oOf/1Dpnx/wXwc3enAZvNU0cPJWXC5RrOfqqhi+FM89QpV+ETd9ZaTAKu/E1YaaB
# qZCg+Y6foX1u/el0N+B55B4kgvdvJy68PvKHTQW2GuhlyR1N4JuQRD7cDSXrc0EY
# pNHyhu3XNfH++RsDpSqzsHqJB5gJf0OAmVDBEhcpp4EgY4WkY0mDvoz4ci9Je7FL
# b/X7Ca69KWcJ67GR1Vif6uvbKHAd9Yu+GF1y9sZievwiqezQuEo0bjgsyxA8XJh9
# uvSzg4F9O1pmDz6ztcxc970C6bkoelSeLVAFNQYJCa0x8/qLoUIO3PEfQkWZe5Sz
# z1giR196F97sgDCYLOgKK4f/n1723o7fGPZF4AAb2os7UbHzjRvrQO27rRngW38J
# FS5RpYZ7MYHLkl0J5hqKoaiytZ+VWrd+YGgbw/Ax65uRpIA1hDtDjGIEwtvsG0L8
# u4+uu+FM2VMWVZa59lFrYv8+VHlmcUqrEQctg9YqJjFAfaVmKU+S10Ks8IoDirNO
# b9A3xtRnMC1EaJC13yAWlDaD29LtyX6qbBPLX0pzy5zirK7x3zihghjoMIIY5AYK
# KwYBBAGCNwMDATGCGNQwghjQBgkqhkiG9w0BBwKgghjBMIIYvQIBAzEPMA0GCWCG
# SAFlAwQCAgUAMIIBBwYLKoZIhvcNAQkQAQSggfcEgfQwgfECAQEGCisGAQQBsjEC
# AQEwQTANBglghkgBZQMEAgIFAAQwJBfe0f0wB4dEgf7hydos8L/8s/CKZb0KoLrh
# JKIABp29wil0a98RGgpFRosAbBR7AhQkxl5DEYw6mU+eXlWoLJcpr6nuNBgPMjAy
# NTEwMDIxNTU0NTFaoHakdDByMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOV2VzdCBZ
# b3Jrc2hpcmUxGDAWBgNVBAoTD1NlY3RpZ28gTGltaXRlZDEwMC4GA1UEAxMnU2Vj
# dGlnbyBQdWJsaWMgVGltZSBTdGFtcGluZyBTaWduZXIgUjM2oIITBDCCBmIwggTK
# oAMCAQICEQCkKTtuHt3XpzQIh616TrckMA0GCSqGSIb3DQEBDAUAMFUxCzAJBgNV
# BAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxLDAqBgNVBAMTI1NlY3Rp
# Z28gUHVibGljIFRpbWUgU3RhbXBpbmcgQ0EgUjM2MB4XDTI1MDMyNzAwMDAwMFoX
# DTM2MDMyMTIzNTk1OVowcjELMAkGA1UEBhMCR0IxFzAVBgNVBAgTDldlc3QgWW9y
# a3NoaXJlMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxMDAuBgNVBAMTJ1NlY3Rp
# Z28gUHVibGljIFRpbWUgU3RhbXBpbmcgU2lnbmVyIFIzNjCCAiIwDQYJKoZIhvcN
# AQEBBQADggIPADCCAgoCggIBANOElfRupFN48j0QS3gSBzzclIFTZ2Gsn7BjsmBF
# 659/kpA2Ey7NXK3MP6JdrMBNU8wdmkf+SSIyjX++UAYWtg3Y/uDRDyg8RxHeHRJ+
# 0U1jHEyH5uPdk1ttiPC3x/gOxIc9P7Gn3OgW7DQc4x07exZ4DX4XyaGDq5LoEmk/
# BdCM1IelVMKB3WA6YpZ/XYdJ9JueOXeQObSQ/dohQCGyh0FhmwkDWKZaqQBWrBwZ
# ++zqlt+z/QYTgEnZo6dyIo2IhXXANFkCHutL8765NBxvolXMFWY8/reTnFxk3Maj
# gM5NX6wzWdWsPJxYRhLxtJLSUJJ5yWRNw+NBqH1ezvFs4GgJ2ZqFJ+Dwqbx9+rw+
# F2gBdgo4j7CVomP49sS7CbqsdybbiOGpB9DJhs5QVMpYV73TVV3IwLiBHBECrTgU
# fZVOMF0KSEq2zk/LsfvehswavE3W4aBXJmGjgWSpcDz+6TqeTM8f1DIcgQPdz0IY
# gnT3yFTgiDbFGOFNt6eCidxdR6j9x+kpcN5RwApy4pRhE10YOV/xafBvKpRuWPjO
# PWRBlKdm53kS2aMh08spx7xSEqXn4QQldCnUWRz3Lki+TgBlpwYwJUbR77DAayNw
# AANE7taBrz2v+MnnogMrvvct0iwvfIA1W8kp155Lo44SIfqGmrbJP6Mn+Udr3MR2
# oWozAgMBAAGjggGOMIIBijAfBgNVHSMEGDAWgBRfWO1MMXqiYUKNUoC6s2GXGaIy
# mzAdBgNVHQ4EFgQUiGGMoSo3ZIEoYKGbMdCM/SwCzk8wDgYDVR0PAQH/BAQDAgbA
# MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwSgYDVR0gBEMw
# QTA1BgwrBgEEAbIxAQIBAwgwJTAjBggrBgEFBQcCARYXaHR0cHM6Ly9zZWN0aWdv
# LmNvbS9DUFMwCAYGZ4EMAQQCMEoGA1UdHwRDMEEwP6A9oDuGOWh0dHA6Ly9jcmwu
# c2VjdGlnby5jb20vU2VjdGlnb1B1YmxpY1RpbWVTdGFtcGluZ0NBUjM2LmNybDB6
# BggrBgEFBQcBAQRuMGwwRQYIKwYBBQUHMAKGOWh0dHA6Ly9jcnQuc2VjdGlnby5j
# b20vU2VjdGlnb1B1YmxpY1RpbWVTdGFtcGluZ0NBUjM2LmNydDAjBggrBgEFBQcw
# AYYXaHR0cDovL29jc3Auc2VjdGlnby5jb20wDQYJKoZIhvcNAQEMBQADggGBAAKB
# PqSGclEh+WWpLj1SiuHlm8xLE0SThI2yLuq+75s11y6SceBchpnKpxWaGtXc8dya
# 1Aq3RuW//y3wMThsvT4fSba2AoSWlR67rA4fTYGMIhgzocsids0ct/pHaocLVJSw
# nTYxY2pE0hPoZAvRebctbsTqENmZHyOVjOFlwN2R3DRweFeNs4uyZN5LRJ5EnVYl
# cTOq3bl1tI5poru9WaQRWQ4eynXp7Pj0Fz4DKr86HYECRJMWiDjeV0QqAcQMFsIj
# JtrYTw7mU81qf4FBc4u4swphLeKRNyn9DDrd3HIMJ+CpdhSHEGleeZ5I79YDg3B3
# A/fmVY2GaMik1Vm+FajEMv4/EN2mmHf4zkOuhYZNzVm4NrWJeY4UAriLBOeVYODd
# A1GxFr1ycbcUEGlUecc4RCPgYySs4d00NNuicR4a9n7idJlevAJbha/arIYMEuUq
# TeRRbWkhJwMKmb9yEvppRudKyu1t6l21sIuIZqcpVH8oLWCxHS0LpDRF9Y4jijCC
# BhQwggP8oAMCAQICEHojrtpTaZYPkcg+XPTH4z8wDQYJKoZIhvcNAQEMBQAwVzEL
# MAkGA1UEBhMCR0IxGDAWBgNVBAoTD1NlY3RpZ28gTGltaXRlZDEuMCwGA1UEAxMl
# U2VjdGlnbyBQdWJsaWMgVGltZSBTdGFtcGluZyBSb290IFI0NjAeFw0yMTAzMjIw
# MDAwMDBaFw0zNjAzMjEyMzU5NTlaMFUxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9T
# ZWN0aWdvIExpbWl0ZWQxLDAqBgNVBAMTI1NlY3RpZ28gUHVibGljIFRpbWUgU3Rh
# bXBpbmcgQ0EgUjM2MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAzZjY
# Q0GrboIr7PYzfiY05ImM0+8iEoBUPu8mr4wOgYPjoiIz5vzf7d5wu8GFK1JWN5hc
# iN9rdqOhbdxLcSVwnOTJmUGfAMQm4eXOls3iQwfapEFWuOsYmBKXPNSpwZAFoLGl
# 5y1EaGGc5LByM8wjcbSF52/Z42YaJRsPXY545E3QAPN2mxDh0OLozhiGgYT1xtjX
# VfEzYBVmfQaI5QL35cTTAjsJAp85R+KAsOfuL9Z7LFnjdcuPkZWjssMETFIueH69
# rxbFOUD64G+rUo7xFIdRAuDNvWBsv0iGDPGaR2nZlY24tz5fISYk1sPY4gir99aX
# AGnoo0vX3Okew4MsiyBn5ZnUDMKzUcQrpVavGacrIkmDYu/bcOUR1mVBIZ0X7P4b
# Kf38JF7Mp7tY3LFF/h7hvBS2tgTYXlD7TnIMPrxyXCfB5yQq3FFoXRXM3/DvqQ4s
# hoVWF/mwwz9xoRku05iphp22fTfjKRIVpm4gFT24JKspEpM8mFa9eTgKWWCvAgMB
# AAGjggFcMIIBWDAfBgNVHSMEGDAWgBT2d2rdP/0BE/8WoWyCAi/QCj0UJTAdBgNV
# HQ4EFgQUX1jtTDF6omFCjVKAurNhlxmiMpswDgYDVR0PAQH/BAQDAgGGMBIGA1Ud
# EwEB/wQIMAYBAf8CAQAwEwYDVR0lBAwwCgYIKwYBBQUHAwgwEQYDVR0gBAowCDAG
# BgRVHSAAMEwGA1UdHwRFMEMwQaA/oD2GO2h0dHA6Ly9jcmwuc2VjdGlnby5jb20v
# U2VjdGlnb1B1YmxpY1RpbWVTdGFtcGluZ1Jvb3RSNDYuY3JsMHwGCCsGAQUFBwEB
# BHAwbjBHBggrBgEFBQcwAoY7aHR0cDovL2NydC5zZWN0aWdvLmNvbS9TZWN0aWdv
# UHVibGljVGltZVN0YW1waW5nUm9vdFI0Ni5wN2MwIwYIKwYBBQUHMAGGF2h0dHA6
# Ly9vY3NwLnNlY3RpZ28uY29tMA0GCSqGSIb3DQEBDAUAA4ICAQAS13sgrQ41WAye
# gR0lWP1MLWd0r8diJiH2VVRpxqFGhnZbaF+IQ7JATGceTWOS+kgnMAzGYRzpm8jI
# cjlSQ8JtcqymKhgx1s6cFZBSfvfeoyigF8iCGlH+SVSo3HHr98NepjSFJTU5KSRK
# K+3nVSWYkSVQgJlgGh3MPcz9IWN4I/n1qfDGzqHCPWZ+/Mb5vVyhgaeqxLPbBIqv
# 6cM74Nvyo1xNsllECJJrOvsrJQkajVz4xJwZ8blAdX5umzwFfk7K/0K3fpjgiXpq
# NOpXaJ+KSRW0HdE0FSDC7+ZKJJSJx78mn+rwEyT+A3z7Ss0gT5CpTrcmhUwIw9jb
# vnYuYRKxFVWjKklW3z83epDVzoWJttxFpujdrNmRwh1YZVIB2guAAjEQoF42H0BA
# 7WBCueHVMDyV1e4nM9K4As7PVSNvQ8LI1WRaTuGSFUd9y8F8jw22BZC6mJoB40d7
# SlZIYfaildlgpgbgtu6SDsek2L8qomG57Yp5qTqof0DwJ4Q4HsShvRl/59T4IJBo
# vRwmqWafH0cIPEX7cEttS5+tXrgRtMjjTOp6A9l0D6xcKZtxnLqiTH9KPCy6xZEi
# 0UDcMTww5Fl4VvoGbMG2oonuX3f1tsoHLaO/Fwkj3xVr3lDkmeUqivebQTvGkx5h
# GuJaSVQ+x60xJ/Y29RBr8Tm9XJ59AjCCBoIwggRqoAMCAQICEDbCsL18Gzrno7Pd
# NsvJdWgwDQYJKoZIhvcNAQEMBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpO
# ZXcgSmVyc2V5MRQwEgYDVQQHEwtKZXJzZXkgQ2l0eTEeMBwGA1UEChMVVGhlIFVT
# RVJUUlVTVCBOZXR3b3JrMS4wLAYDVQQDEyVVU0VSVHJ1c3QgUlNBIENlcnRpZmlj
# YXRpb24gQXV0aG9yaXR5MB4XDTIxMDMyMjAwMDAwMFoXDTM4MDExODIzNTk1OVow
# VzELMAkGA1UEBhMCR0IxGDAWBgNVBAoTD1NlY3RpZ28gTGltaXRlZDEuMCwGA1UE
# AxMlU2VjdGlnbyBQdWJsaWMgVGltZSBTdGFtcGluZyBSb290IFI0NjCCAiIwDQYJ
# KoZIhvcNAQEBBQADggIPADCCAgoCggIBAIid2LlFZ50d3ei5JoGaVFTAfEkFm8xa
# FQ/ZlBBEtEFAgXcUmanU5HYsyAhTXiDQkiUvpVdYqZ1uYoZEMgtHES1l1Cc6HaqZ
# zEbOOp6YiTx63ywTon434aXVydmhx7Dx4IBrAou7hNGsKioIBPy5GMN7KmgYmuu4
# f92sKKjbxqohUSfjk1mJlAjthgF7Hjx4vvyVDQGsd5KarLW5d73E3ThobSkob2SL
# 48LpUR/O627pDchxll+bTSv1gASn/hp6IuHJorEu6EopoB1CNFp/+HpTXeNARXUm
# dRMKbnXWflq+/g36NJXB35ZvxQw6zid61qmrlD/IbKJA6COw/8lFSPQwBP1ityZd
# wuCysCKZ9ZjczMqbUcLFyq6KdOpuzVDR3ZUwxDKL1wCAxgL2Mpz7eZbrb/JWXiOc
# NzDpQsmwGQ6Stw8tTCqPumhLRPb7YkzM8/6NnWH3T9ClmcGSF22LEyJYNWCHrQqY
# ubNeKolzqUbCqhSqmr/UdUeb49zYHr7ALL8bAJyPDmubNqMtuaobKASBqP84uhqc
# RY/pjnYd+V5/dcu9ieERjiRKKsxCG1t6tG9oj7liwPddXEcYGOUiWLm742st50jG
# wTzxbMpepmOP1mLnJskvZaN5e45NuzAHteORlsSuDt5t4BBRCJL+5EZnnw0ezntk
# 9R8QJyAkL6/bAgMBAAGjggEWMIIBEjAfBgNVHSMEGDAWgBRTeb9aqitKz1SA4dib
# wJ3ysgNmyzAdBgNVHQ4EFgQU9ndq3T/9ARP/FqFsggIv0Ao9FCUwDgYDVR0PAQH/
# BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wEwYDVR0lBAwwCgYIKwYBBQUHAwgwEQYD
# VR0gBAowCDAGBgRVHSAAMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6Ly9jcmwudXNl
# cnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FDZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNy
# bDA1BggrBgEFBQcBAQQpMCcwJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnVzZXJ0
# cnVzdC5jb20wDQYJKoZIhvcNAQEMBQADggIBAA6+ZUHtaES45aHF1BGH5Lc7JYzr
# ftrIF5Ht2PFDxKKFOct/awAEWgHQMVHol9ZLSyd/pYMbaC0IZ+XBW9xhdkkmUV/K
# bUOiL7g98M/yzRyqUOZ1/IY7Ay0YbMniIibJrPcgFp73WDnRDKtVutShPSZQZAdt
# FwXnuiWl8eFARK3PmLqEm9UsVX+55DbVIz33Mbhba0HUTEYv3yJ1fwKGxPBsP/Mg
# TECimh7eXomvMm0/GPxX2uhwCcs/YLxDnBdVVlxvDjHjO1cuwbOpkiJGHmLXXVNb
# sdXUC2xBrq9fLrfe8IBsA4hopwsCj8hTuwKXJlSTrZcPRVSccP5i9U28gZ7OMzoJ
# GlxZ5384OKm0r568Mo9TYrqzKeKZgFo0fj2/0iHbj55hc20jfxvK3mQi+H7xpbzx
# ZOFGm/yVQkpo+ffv5gdhp+hv1GDsvJOtJinJmgGbBFZIThbqI+MHvAmMmkfb3fTx
# mSkop2mSJL1Y2x/955S29Gu0gSJIkc3z30vU/iXrMpWx2tS7UVfVP+5tKuzGtgkP
# 7d/doqDrLF1u6Ci3TpjAZdeLLlRQZm867eVeXED58LXd1Dk6UvaAhvmWYXoiLz4J
# A5gPBcz7J311uahxCweNxE+xxxR3kT0WKzASo5G/PyDez6NHdIUKBeE3jDPs2ACc
# 6CkJ1Sji4PKWVT0/MYIEkjCCBI4CAQEwajBVMQswCQYDVQQGEwJHQjEYMBYGA1UE
# ChMPU2VjdGlnbyBMaW1pdGVkMSwwKgYDVQQDEyNTZWN0aWdvIFB1YmxpYyBUaW1l
# IFN0YW1waW5nIENBIFIzNgIRAKQpO24e3denNAiHrXpOtyQwDQYJYIZIAWUDBAIC
# BQCgggH5MBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAcBgkqhkiG9w0BCQUx
# DxcNMjUxMDAyMTU1NDUxWjA/BgkqhkiG9w0BCQQxMgQwfVoEs/yHGe5yTGprZ/2/
# gqYnjR/qWEWi/bYkDe5vSkQfOhTSWKWEPcmQp5J76DIhMIIBegYLKoZIhvcNAQkQ
# AgwxggFpMIIBZTCCAWEwFgQUOMkUgRBEtNxmPpPUdEuBQYaptbEwgYcEFMauVOR4
# hvF8PVUSSIxpw0p6+cLdMG8wW6RZMFcxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9T
# ZWN0aWdvIExpbWl0ZWQxLjAsBgNVBAMTJVNlY3RpZ28gUHVibGljIFRpbWUgU3Rh
# bXBpbmcgUm9vdCBSNDYCEHojrtpTaZYPkcg+XPTH4z8wgbwEFIU9Yy2TgoJhfNCQ
# NcSR3pLBQtrHMIGjMIGOpIGLMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKTmV3
# IEplcnNleTEUMBIGA1UEBxMLSmVyc2V5IENpdHkxHjAcBgNVBAoTFVRoZSBVU0VS
# VFJVU1QgTmV0d29yazEuMCwGA1UEAxMlVVNFUlRydXN0IFJTQSBDZXJ0aWZpY2F0
# aW9uIEF1dGhvcml0eQIQNsKwvXwbOuejs902y8l1aDANBgkqhkiG9w0BAQEFAASC
# AgBH7vs5CQxxUKR0ARlnpbVyuWjc+eZdsUNI2PH9/6aOuxDLlrugq98zMe7zeyCS
# DnKJBcoB3vy9V4mPVaqWkV6bj891toOfphJAVDGwXEqBs5o/+2JlfT++UnPGseB0
# N/i7lnQlbgMRBZj/BtZpBzYoY5UUA4OacLrcLAczZ7SET6jTlBfKN1Wm4XpgBPhP
# QBI9gtBTl3t87nLAbaOhHtJ13fjrd+aWKzHozOHgDYgPBmxp1hOMVLzkYF/mBjyD
# c5LQReTVHRHJivRcYIlztsPYtOmvKs4l0Ld20d2WTTSbj6i3bD/LQm8kJIc1K7oj
# BzogoJ4Gf4nF/WCBBMcB2AwtNT5cpvAvwNQBOvLR/r66fA2WAcvPXynj9lUJQDr5
# ohzUtgLIsdRgitQYuTwDCqmiyyEAT+0tJjtXgVrDqF5UDD0BnPRlcqBT1Av8obq+
# vjKztr0sToC9DbeiXJ/MqlJNSbkV5lMlEl9lTx/P90LohjpnBS1nZGuXRV0csbD+
# ftnIkZCo4WQARkKCcScyVhq7k5rcAafX5F7brc1WcA2H0RomifxSNggA8VNjEKrB
# no6QmLDAUXzF0H01ewZxvHKRsF66zdvq4fwota0E1l7DNdYG/WW9dBMneGFt5Wpy
# 71C6YJza2tBjrYVZTxxcaZiaWLxIb0CZlQlsv6bKOvxbGw==
# SIG # End signature block
